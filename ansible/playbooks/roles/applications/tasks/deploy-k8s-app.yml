---
- name: "Application | {{ app_dir_name | capitalize }} | Assert input parameters"
  assert:
    that:
      - deployment_tmp_root_dir is defined
      - app_dir_name is defined

- name: "Application | {{ app_dir_name | capitalize }} | Create temporary directory (app)"
  file: # noqa risky-file-permissions (temporary directory)
    path: "{{ deployment_tmp_root_dir }}/{{ app_dir_name }}"
    state: directory

- name: "Application | {{ app_dir_name | capitalize }} | Deploy application"
  # Everything executed here is considered sensitive
  no_log: true

  always:
    - &cleanup-facts
      name: "Application | {{ app_dir_name | capitalize }} | Make sure sensitive data is removed from facts"
      set_fact:
        concatenated_templates: ""
        encrypted_templates: ""
        failed_result: null

  block:
    - *cleanup-facts

    - name: "Application | {{ app_dir_name | capitalize }} | Decide if internal docker registry will be used"
      set_fact:
        use_epiphany_image_registry: >-
          {{ (not _k8s_as_cloud_service) and _use_local_image_registry }}
      vars:
        # Be extra paranoid
        _k8s_as_cloud_service: >-
          {{ k8s_as_cloud_service | bool }}
        # Enable by default
        _use_local_image_registry: >-
          {{ (data.use_local_image_registry is undefined) or (data.use_local_image_registry | bool) }}

    - name: "Application | {{ app_dir_name | capitalize }} | Find all template files"
      find:
        path: "{{ role_path }}/templates/{{ app_dir_name }}/"
        patterns: "*.yml.j2"
        recurse: false
      register: find_template_files

    - name: "Application | {{ app_dir_name | capitalize }} | Render or load templates"
      include_tasks: process-k8s-template.yml
      vars:
        output_fact_name: concatenated_templates
        _app_dir_name: "{{ app_dir_name }}"
      loop_control:
        # Please do not use 'vars: { template_path: "{{ item }}" }', it is not going to work!
        loop_var: template_path
      loop: >-
        {{ find_template_files.files | map(attribute='path') | sort }}

    - name: "Application | {{ app_dir_name | capitalize }} | Deploy k8s resources"
      command: kubectl apply -f-
      args:
        # For security reasons we do not store rendered templates on local hdd/ssd drives
        stdin: "{{ concatenated_templates }}"

  rescue:
    - name: "Application | {{ app_dir_name | capitalize }} | Save original ansible_failed_result in a fact for later use"
      set_fact:
        failed_result: "{{ ansible_failed_result }}"

    # This is handy after an error occurs
    # The reason for employing encryption here is that rendered templates may contain sensitive data
    # To decrypt and examine, run:
    #  ansible-vault view ./debug.yml
    - name: "Application | {{ app_dir_name | capitalize }} | Encrypt and save templates (debug)"
      when:
        - concatenated_templates is defined
        - concatenated_templates | length > 0
      block:
        - name: "Application | {{ app_dir_name | capitalize }} | Encrypt concatenated templates"
          command: ansible-vault encrypt_string --stdin-name concatenated_templates
          args:
            # For security reasons we do not store rendered templates on local hdd/ssd drives
            stdin: "{{ concatenated_templates }}"
          environment:
            ANSIBLE_VAULT_PASSWORD_FILE: "{{ vault_tmp_file_location }}"
          register: encrypted_templates
          ignore_errors: true

        - name: "Application | {{ app_dir_name | capitalize }} | Write stderr to logs when encryption failed"
          when: encrypted_templates is failure
          debug:
            var: encrypted_templates.stderr_lines
          no_log: false  # needed for displaying what went wrong

        - name: "Application | {{ app_dir_name | capitalize }} | Save encrypted templates into {{ deployment_tmp_root_dir }}/{{ app_dir_name }}/debug.yml"
          when: encrypted_templates is success
          copy:
            dest: "{{ deployment_tmp_root_dir }}/{{ app_dir_name }}/debug.yml"
            # To be able to successfully parse yaml payload we need to remove the custom "!vault" tag
            content: >-
              {{ (encrypted_templates.stdout | regex_replace('!vault', '') | from_yaml).concatenated_templates }}
            decrypt: false
            mode: ugo=r

    - name: "Application | {{ app_dir_name | capitalize }} | Print original error and fail"
      fail:
        msg: "{{ failed_result }}"
      no_log: false  # needed for displaying what went wrong

- name: "Application | {{ app_dir_name | capitalize }} | Remove temporary directory (app)"
  file:
    path: "{{ deployment_tmp_root_dir }}/{{ app_dir_name }}"
    state: absent
