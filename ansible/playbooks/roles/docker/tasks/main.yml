---
# Docker (used by master & worker as dependency)

- name: Get information on installed packages as facts
  package_facts:
    manager: auto
  when: ansible_facts.packages is undefined

- name: Check containerd.io versions
  when:
    - ansible_facts.packages['containerd.io'] is defined
    - ansible_os_family == 'Debian'
  block:
    - name: Set fact installed containerd.io version
      set_fact:
        containerd_installed: "{{ ansible_facts.packages['containerd.io'][0].version.split('-')[0] }}"

    - name: Print containerd.io versions
      debug:
        msg:
          - "Installed version: {{ containerd_installed }}"
          - "Target version: {{ containerd_version }}"

    # apt module doesn't support --allow-downgrades so we remove packages as workaround
    - name: Remove containerd.io package installed as dependency if they exist
      apt:
        name: containerd.io
        state: absent
      when:
        - containerd_version is version(containerd_installed, '!=')

- name: Install Docker packages
  package:
    name: "{{ _packages[ansible_os_family] }}"
    state: present
  vars:
    _packages:
      Debian:
        - containerd.io={{ containerd_version }}-*
        - docker-ce-cli={{ docker_version.Debian }}
        - docker-ce-rootless-extras={{ docker_version.Debian }}
        - docker-ce={{ docker_version.Debian }}
      RedHat:
        - containerd.io-{{ containerd_version }}
        - docker-ce-cli-{{ docker_version.RedHat }}
        - docker-ce-rootless-extras-{{ docker_version.RedHat }}
        - docker-ce-{{ docker_version.RedHat }}
  module_defaults:
    yum: {lock_timeout: "{{ yum_lock_timeout }}",
          allow_downgrade: true}

- include_tasks: configure-docker.yml
