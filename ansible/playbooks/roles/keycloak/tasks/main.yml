---
- name: Provide database
  when: specification.database.epiphany_managed
  vars:
    _chart_values: "{{ specification.chart_values }}"
  block:
    - name: Include vars from application role
      include_vars:
        file: roles/applications/vars/main.yml
        name: applications_vars
      when: groups.postgresql | count > 1 or "'pgbouncer' in _chart_values.database.hostname"

    - name: Include database configuration when Epiphany storage is used
      include_tasks: create-database.yml

- name: Download Keycloak Helm chart
  include_role:
    name: download
    tasks_from: download_file
  vars:
    file_name: "{{ keycloak_helm_chart_file_name }}"
    repository_url: "{{ custom_repository_url | default('http://localhost/epirepo', true) }}"

- name: Get autogenerated certificates for idempotency
  when:
    - specification.chart_values.secrets is defined
    - not specification.tls_certificates.overwrite_autogenerated
  block:
    - name: Get secrets with autogenerated certificates
      set_fact:
        secrets_with_autogen_certs: >-
          {{ _string_data_secrets | json_query(_convert_query) | json_query(_search_query) }}
      vars:
        _string_data_secrets: >-
          {{ specification.chart_values.secrets | dict2items | selectattr('value.stringData', 'defined') }}
        _convert_query: '[].{ name: key, data: to_string(value.stringData) }'
        _search_query: "[?(contains(@.data, 'genCA') || contains(@.data, 'genSignedCert'))].name"

    - name: Get autogenerated certificates
      when: secrets_with_autogen_certs
      command: |
        kubectl get secret {{ specification.chart_values.fullnameOverride }}-{{ item }} \
          -n {{ specification.namespace }} -o jsonpath="{.data}"
      changed_when: false
      failed_when: "'NotFound' not in autogen_certs_data.stderr and autogen_certs_data.rc != 0"
      register: autogen_certs_data
      loop: "{{ secrets_with_autogen_certs}}"

# Load chart values that dynamically override those specified under specification.chart_values
- name: Load dynamic values from template
  set_fact:
    dynamic_values: "{{ lookup('template', 'dynamic-chart-values.yml.j2') | from_yaml }}"
  vars:
    _chart_values: "{{ specification.chart_values }}"
    _query: '[].{ name: item, json_data: stdout }'
    _results: "{{ autogen_certs_data.results | selectattr('stdout', 'defined') | json_query(_query) }}"
    _parsed:
      names: "{{ _results | map(attribute='name') }}"
      data: "{{ _results | map(attribute='json_data') | map('from_json') }}"
    _existing_autogen_certs: "{{ dict(_parsed.names | zip(_parsed.data)) }}"

- name: Create configuration file for Helm chart
  copy:
    content: |
      {{ specification.chart_values | combine(dynamic_values, recursive=True) | to_nice_yaml }}
    dest: '{{ vault_location }}/keycloak-chart-values.yml'
    mode: u=rwx,go=

- name: Install Keycloak with Helm chart
  command: |
    helm upgrade keycloak {{ download_directory }}/{{ keycloak_helm_chart_file_name }} \
      -f {{ vault_location }}/keycloak-chart-values.yml \
      -n {{ specification.namespace }} \
      --create-namespace \
      --install

- name: Remove temporary file  # contains sensitive data
  file:
    path: '{{ vault_location }}/keycloak-chart-values.yml'
    state: absent
