---
- name: Get information on installed packages
  package_facts:
  when: ansible_facts.packages is undefined

- name: Remove Docker
  block:
  - name: Stop Kubelet before Docker removal
    systemd:
      name: kubelet
      state: stopped
    notify:
    - Restart kubelet

  - name: Remove Docker
    include_role:
      name: docker
      tasks_from: remove-docker.yml
  when:
    - is_upgrade_run
    - inventory_hostname not in groups.image_registry
    - ansible_facts.packages['docker-ce'] is defined

- name: Install containerd package
  package:
    name: "{{ _packages[ansible_os_family] }}"
    state: present
  vars:
    _packages:
      Debian:
        - containerd.io={{ containerd_version }}-*
      RedHat:
        - containerd.io-{{ containerd_version }}
  module_defaults:
    yum: { lock_timeout: "{{ yum_lock_timeout }}" }

- name: Configure prerequisites
  include_tasks: configure-prerequisites.yml

- name: Configure containerd
  include_tasks: configure-containerd.yml

# To be replaced by filter plugin (https://github.com/epiphany-platform/epiphany/issues/2943)
- name: Reconfigure kubelet args
  when: is_upgrade_run
  block:
  - name: Get kubeadm-flags.env file content
    slurp:
      src: /var/lib/kubelet/kubeadm-flags.env
    register: kubelet_kubeadm_args

  - name: Set kubelet_kubeadmn_args_content
    set_fact:
      kubelet_kubeadmn_args_content: "{{ kubelet_kubeadm_args.content | b64decode }}"

  - name: Modify container-runtime
    replace:
      path: /var/lib/kubelet/kubeadm-flags.env
      regexp: '{{ item.regexp }}'
      replace: '{{ item.replace }}'
      backup: true
    loop:
      - { regexp: '^(KUBELET_KUBEADM_ARGS=\")(.*)(--container-runtime=[a-zA-Z0-9_]+)(.*)', replace: '\1\2--container-runtime=remote\4' }
      - { regexp: '^(KUBELET_KUBEADM_ARGS=\")(.*)(--container-runtime-endpoint=.*\.sock)(.*)', replace: '\1\2--container-runtime-endpoint=/run/containerd/containerd.sock\4' }
    when: kubelet_kubeadmn_args_content.find('--container-runtime') != -1

  - name: Append container-runtime to kubelet config
    replace:
      path: /var/lib/kubelet/kubeadm-flags.env
      regexp: '^(KUBELET_KUBEADM_ARGS=\")(.*)(\")$'
      replace: '\1\2 --container-runtime=remote"'
    when: kubelet_kubeadmn_args_content.find('--container-runtime') == -1

  - name: Append container-runtime-endpoint to kubelet config
    replace:
      path: /var/lib/kubelet/kubeadm-flags.env
      regexp: '^(KUBELET_KUBEADM_ARGS=\")(.*)(\")$'
      replace: '\1\2 --container-runtime-endpoint=/run/containerd/containerd.sock"'
    when: kubelet_kubeadmn_args_content.find('--container-runtime-endpoint') == -1
