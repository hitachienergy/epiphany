---
- import_tasks: gather-facts.yml

- name: Load images and run local registry
  when:
    - not custom_image_registry_address
    - inventory_hostname in target_image_registry_hostnames
  block:
    - name: Check if Docker is installed
      command: docker --version
      register: check_docker
      failed_when:
        - check_docker.rc not in [0, 2] # 2 means command not found
      changed_when: false

    # run docker role only if Docker is not installed, since it could upgrade it implicitly (before K8s)
    - name: Install and configure Docker
      import_role:
        name: docker
      when: check_docker.rc != 0

    - name: Reconfigure Docker if necessary
      when: check_docker.rc == 0
      block:
        - name: Include get-registries.yml from docker role # this sets result
          include_role:
            name: docker
            tasks_from: get-registries

        - name: Reconfigure Docker # this restarts Docker daemon
          include_role:
            name: docker
            tasks_from: configure-docker
          when:
            - not image_registry_address in result.stdout

    - name: Migrate registry volume to named one
      when: is_upgrade_run
      block:
        - name: Get image name of registry container
          command: >-
            docker ps --all --format {% raw %}'{{ .Image }}'{% endraw %} -f name={{ epiphany_registry.container_name }}
          changed_when: false
          register: container_image

        - name: Perform migration
          when:
            - container_image.stdout | count > 0  # container exists
            - container_image.stdout != specification.registry_image.name
          block:
            - name: Inspect old version registry container
              command: docker inspect {{ epiphany_registry.container_name }}
              changed_when: false
              register: inspect_registry_container

            - name: Parse information on registry container
              set_fact:
                container_facts: "{{ inspect_registry_container.stdout | from_json | first }}"

            - name: Check if named volume exists
              command: docker volume ls -f name={{ epiphany_registry.volume_name }} --quiet
              changed_when: false
              register: volume_ls

            - name: Create named volume if not exists
              command: docker volume create {{ epiphany_registry.volume_name }}
              when: volume_ls.stdout | count == 0

            - name: Set facts on old version registry volume
              set_fact:
                old_volume: "{{ container_facts.Mounts | selectattr('Destination', '==' ,'/var/lib/registry')
                                                       | first }}"

            - name: Stop old version registry container
              command: docker stop {{ epiphany_registry.container_name }}
              when: container_facts.State.Status == 'running'

            # There is no 'docker volume rename' command
            - name: Move data from old volume
              shell: mv {{ old_volume.Source }}/* {{ _new_volume_path }}
              args:
                removes: "{{ old_volume.Source }}"
              vars:
                _new_volume_path: >-
                  {{ old_volume.Source | replace('/' + old_volume.Name + '/',
                                                 '/' + epiphany_registry.volume_name + '/') }}

            - name: Remove old version registry container
              command: docker rm {{ epiphany_registry.container_name }}

            # Has to be run after container is removed
            - name: Remove old version volume
              command: docker volume rm {{ old_volume.Name }}
              when: old_volume.Name != epiphany_registry.volume_name

    - name: Load registry image
      include_tasks: load-image.yml
      vars:
        docker_image: "{{ specification.registry_image }}"

    - name: Check if registry is running
      command: docker ps -f name={{ epiphany_registry.container_name }} -f status=running --quiet
      register: registry_up_check
      changed_when: false

    - name: Run registry
      when: registry_up_check.stdout | count == 0  # not running
      block:
        - name: Check if named volume exists
          command: docker volume ls -f name={{ epiphany_registry.volume_name }} --quiet
          changed_when: false
          register: volume_ls

        - name: Create named volume if not exists
          command: docker volume create {{ epiphany_registry.volume_name }}
          when: volume_ls.stdout | count == 0

        # todo run registry with SSL - generate/copy certs, mount it to registry container
        - name: Run registry
          command: >-
            docker run -d -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 -p 5000:5000 --restart=always
            --name {{ epiphany_registry.container_name }} -v {{ epiphany_registry.volume_name }}:/var/lib/registry
            {{ specification.registry_image.name }}

    - name: Define images to unpack
      set_fact:
        current_images_to_unpack: "{{ specification.images_to_load[ansible_architecture].current }}"
        generic_images_to_unpack: "{{ specification.images_to_load[ansible_architecture].generic }}"
        legacy_images_to_unpack: "{{ specification.images_to_load[ansible_architecture].legacy }}"

    - name: Initialize image containers
      set_fact:
        available_images: []
        current_images: []
        generic_images: []
        legacy_images: []

    - name: Unpack current images
      set_fact:
        current_images: "{{ current_images + item.value }}"
      loop: "{{ current_images_to_unpack | dict2items }}"

    - name: Unpack generic images
      set_fact:
        generic_images: "{{ generic_images + item.value }}"
      loop: "{{ generic_images_to_unpack | dict2items }}"

    - name: Unpack legacy images
      set_fact:
        legacy_images: "{{ legacy_images + item.value }}"
      loop: "{{ legacy_images_to_unpack | dict2items }}"

    - name: Merge current and generic images
      set_fact:
        current_and_generic_images: >-
          {{ current_images + generic_images }}

    - name: Get list of available images
      include_role:
        name: download
        tasks_from: list_images.yml

    - name: Filter only available images
      set_fact:
        available_images: "{{ available_images + [item] }}"
      when: "{{ item.file_name in list_images_result }}"
      loop: "{{ current_and_generic_images }}"

    - name: Load generic and current version images
      vars:
        docker_image: "{{ item }}"
      include_tasks: load-image.yml
      loop: "{{ available_images }}"

    - name: Push generic and current version images to registry
      vars:
        docker_image: "{{ item }}"
        new_image_tag: "{{ image_registry_address }}/{{ item.name }}"
      include_tasks: push-image.yml
      loop: "{{ available_images }}"

    - name: Load legacy version images to registry when upgrading
      when: is_upgrade_run
      block:
        - name: Load legacy version images
          vars:
            docker_image: "{{ item }}"
          include_tasks: load-image.yml
          loop: "{{ legacy_images }}"

        - name: Push legacy version images to registry
          vars:
            docker_image: "{{ item }}"
            new_image_tag: "{{ image_registry_address }}/{{ item.name }}"
          include_tasks: push-image.yml
          loop: "{{ legacy_images }}"
