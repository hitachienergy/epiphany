- name: Create stores directory
  file:
    path: "{{ specification.security.ssl.server.keystore_location | dirname }}"
    state: directory
    owner: "{{ specification.user }}"
    group: "{{ specification.group }}"
    mode: u=rwx,go=rx

- name: Check if keystore exists on broker
  stat:
    path: "{{ specification.security.ssl.server.keystore_location }}"
    get_attributes: false
    get_checksum: false
    get_mime: false
  changed_when: false
  register: keystore_exists

- name: Generate keystore for each server
  command: keytool -keystore {{ specification.security.ssl.server.keystore_location }} \
           -alias localhost -validity {{ specification.security.ssl.server.cert_validity }} -genkey -keyalg RSA \
           -noprompt -storepass {{ specification.security.ssl.server.passwords.keystore }} \
           -keypass {{ specification.security.ssl.server.passwords.key }} \
           -dname "CN={{ inventory_hostname }}" -ext SAN="DNS:{{ inventory_hostname }}"
  when:
    - not keystore_exists.stat.exists

- name: Check if signing certificate exists
  stat:
    path: "{{ specification.security.ssl.server.keystore_location | dirname }}/ca-cert"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: signing_certificate_exists
  changed_when: false
  when:
    - groups['kafka'][0] == inventory_hostname

- name: Generate signing certificate
  command: openssl req -new -x509 -keyout {{ specification.security.ssl.server.keystore_location | dirname }}/ca-key \
           -out {{ specification.security.ssl.server.keystore_location | dirname }}/ca-cert \
           -days {{ specification.security.ssl.server.cert_validity }} \
           -subj "/CN={{ inventory_hostname }}" \
           --passout pass:{{ specification.security.ssl.server.passwords.key }}
  when:
    - groups['kafka'][0] == inventory_hostname
    - not signing_certificate_exists.stat.exists

- name: Create kafka certificates directory on Epiphany host
  become: false
  file:
    path: "{{ specification.security.ssl.server.local_cert_download_path }}"
    state: directory
    mode: u=rwx,go=
  delegate_to: localhost

- name: Fetching files
  slurp:
    src: "{{ specification.security.ssl.server.keystore_location | dirname }}/{{ item }}"
    dest: "{{ specification.security.ssl.server.local_cert_download_path }}/{{ item }}"
    flat: true
  loop:
    - "ca-cert"
    - "ca-key"
  when:
    - groups['kafka'][0] == inventory_hostname

- name: Copy signing certificate and key to brokers
  copy:
    src: "{{ specification.security.ssl.server.local_cert_download_path }}/{{ item }}"
    dest: "{{ specification.security.ssl.server.keystore_location | dirname }}/"
    mode: preserve
  loop:
    - "ca-cert"
    - "ca-key"
  when:
    - not groups['kafka'][0] == inventory_hostname

- name: Check if trustore exists
  stat:
    path: "{{ specification.security.ssl.server.truststore_location }}"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: trustore_exists

- name: Create trustore
  command: keytool -noprompt -keystore "{{ specification.security.ssl.server.truststore_location }}" -alias CARoot \
           -import -file "{{ specification.security.ssl.server.keystore_location | dirname }}/ca-cert" \
           -storepass {{ specification.security.ssl.server.passwords.keystore }} \
           -keypass {{ specification.security.ssl.server.passwords.key }}
  when:
    - not trustore_exists.stat.exists

- name: Check if CA certificate is already imported
  shell: set -o pipefail && keytool -list -v -keystore {{ specification.security.ssl.server.keystore_location }} \
         -storepass {{ specification.security.ssl.server.passwords.keystore }} \
         | grep -i "Alias name" | grep -i "caroot"
  failed_when: "caroot_exists.rc == 2"
  changed_when: false
  register: caroot_exists

- name: Check if certificate signed by CA is already imported
  shell: |-
         set -o pipefail && keytool -list -v -keystore {{ specification.security.ssl.server.keystore_location }} \
         -storepass {{ specification.security.ssl.server.passwords.keystore }} \
         -alias localhost \
         | grep -i 'Certificate chain length: 2'
  failed_when: "signed_cert_exists.rc == 2"
  changed_when: false
  register: signed_cert_exists

- name: Export certificate to sign certificate with CA
  command: keytool -noprompt -keystore {{ specification.security.ssl.server.keystore_location }} \
           -alias localhost -certreq \
           -file "{{ specification.security.ssl.server.keystore_location | dirname }}/cert-file" \
           -storepass {{ specification.security.ssl.server.passwords.keystore }} \
           -keypass {{ specification.security.ssl.server.passwords.key }}
  when:
    - signed_cert_exists.rc == 1

- name: Signing certificate with CA
  command: openssl x509 -req -CA "{{ specification.security.ssl.server.keystore_location | dirname }}/ca-cert" \
           -CAkey "{{ specification.security.ssl.server.keystore_location | dirname }}/ca-key" \
           -in "{{ specification.security.ssl.server.keystore_location | dirname }}/cert-file" \
           -out "{{ specification.security.ssl.server.keystore_location | dirname }}/cert-signed" \
           -days {{ specification.security.ssl.server.cert_validity }} -CAcreateserial \
           -passin pass:{{ specification.security.ssl.server.passwords.key }}
  when:
    - signed_cert_exists.rc == 1

- name: Import certificate CA
  command: keytool -noprompt -keystore {{ specification.security.ssl.server.keystore_location }} -alias CARoot \
           -import -file "{{ specification.security.ssl.server.keystore_location | dirname }}/ca-cert" \
           -storepass {{ specification.security.ssl.server.passwords.keystore }}
  when:
    - caroot_exists.rc == 1

- name: Import certificate signed by CA
  command: keytool -noprompt -keystore {{ specification.security.ssl.server.keystore_location }} -alias localhost \
           -import -file "{{ specification.security.ssl.server.keystore_location | dirname }}/cert-signed" \
           -storepass {{ specification.security.ssl.server.passwords.keystore }}
  when:
    - signed_cert_exists.rc == 1

- name: Remove extracted key and cert from others than root node
  file:
    path: "{{ specification.security.ssl.server.keystore_location | dirname }}/{{ item }}"
    state: absent
  loop:
    - "ca-cert"
    - "ca-key"
  when:
    - not groups['kafka'][0] == inventory_hostname
