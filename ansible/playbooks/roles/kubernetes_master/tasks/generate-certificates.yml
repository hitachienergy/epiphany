---
- name: Set pki_backup_dir fact
  set_fact:
    pki_backup_dir: "{{ pki.location | regex_replace('\\/$', '') }}-backup-{{ ansible_date_time.iso8601_basic_short }}"

- name: Back up current certificates
  synchronize:
    src: "{{ pki.location }}/"
    dest: "{{ pki_backup_dir }}"
  delegate_to: "{{ inventory_hostname }}"

- name: Generate certificates
  vars:
    # https://kubernetes.io/docs/setup/best-practices/certificates/#all-certificates
    _certificates_opt_mapping:
      - name: admin.conf
        kind: ['clientAuth']
        target: "{{ pki.location }}/admin.conf"
        parent_ca: ca
      - name: apiserver-etcd-client
        kind: ['clientAuth']
        target: "{{ pki.location }}/apiserver-etcd-client"
        parent_ca: etcd/ca
      - name: apiserver-kubelet-client
        kind: ['clientAuth']
        target: "{{ pki.location }}/apiserver-kubelet-client"
        parent_ca: ca
      - name: apiserver
        kind: ['serverAuth']
        target: "{{ pki.location }}/apiserver"
        parent_ca: ca
      - name: controller-manager.conf
        kind: ['clientAuth']
        target: "{{ pki.location }}/controller-manager.conf"
        parent_ca: ca
      - name: etcd/healthcheck-client
        kind: ['clientAuth']
        target: "{{ pki.location }}/etcd/healthcheck-client"
        parent_ca: etcd/ca
      - name: etcd/peer
        kind: ['serverAuth', 'clientAuth']
        target: "{{ pki.location }}/etcd/peer"
        parent_ca: etcd/ca
      - name: etcd/server
        kind: ['serverAuth', 'clientAuth']
        target: "{{ pki.location }}/etcd/server"
        parent_ca: etcd/ca
      - name: front-proxy-client
        kind: ['clientAuth']
        target: "{{ pki.location }}/front-proxy-client"
        parent_ca: front-proxy-ca
      - name: scheduler.conf
        kind: ['clientAuth']
        target: "{{ pki.location }}/scheduler.conf"
        parent_ca: ca
  block:
    - name: Create certificates_opt_mapping fact
      block:
        - name: Set non-default certificates_opt_mapping fact value
          set_fact:
            certificates_opt_mapping: "{{ certificates_opt_mapping | default([]) + [item] }}"
          when:
            - certificates_renewal_list is defined
            - item.name in certificates_renewal_list
          loop: "{{ _certificates_opt_mapping }}"
          loop_control:
            label: "{{ item.name }}"

        - name: Set default certificates_opt_mapping fact value
          set_fact:
            certificates_opt_mapping: "{{ _certificates_opt_mapping }}"
            certificates_renewal_list: "{{ _certificates_opt_mapping | map(attribute='name') }}"
          when: certificates_renewal_list is not defined

    - name: Ensure necessary directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: u=rw
      loop:
        - "{{ pki.location }}/csr"
        - "{{ pki.location }}/ext"
        - "{{ pki.location }}/ext/etcd"

    - name: Generate new CSR
      command: |-
        kubeadm certs generate-csr \
          --cert-dir=csr \
          --kubeconfig-dir=csr \
          --config=/etc/kubeadm/kubeadm-config.yml
      args:
        chdir: "{{ pki.location }}"

    # ansible openssl modules and openssl tool behave different, extensions file is necessary for openssl
    # https://github.com/openssl/openssl/issues/10458
    - name: Register SAN extension for all CSR files
      shell: |-
        openssl req -text -noout \
          -reqopt no_subject,no_header,no_version,no_serial,no_signame,no_validity,no_issuer,no_pubkey,no_sigdump,no_aux \
          -in csr/{{ item.name }}.csr \
          | sed '1,3d;s/ Address//g;s/^[[:blank:]]*//;s/[[:blank:]]*$//'
      args:
        chdir: "{{ pki.location }}"
      register: csr_info
      loop: "{{ certificates_opt_mapping }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Generate extension files
      template:
        src: certificate-v3.ext.j2
        dest: "{{ pki.location }}/ext/{{ item.0.name }}.ext"
        mode: u=rw,g=r,o=
      loop: "{{ certificates_opt_mapping|zip(csr_info.results)|list }}"
      loop_control:
        label: "{{ item.0.name }}"

    - name: Create signed certificates
      command: |-
        openssl x509 -req -days {{ valid_days }} \
          -in csr/{{ item.name }}.csr \
          -extfile ext/{{ item.name }}.ext \
          -CA {{ item.parent_ca }}.crt \
          -CAkey {{ item.parent_ca }}.key \
          -CAcreateserial \
          -out {{ item.target }}.crt
      args:
        chdir: "{{ pki.location }}"
      loop: "{{ certificates_opt_mapping }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Copy keys to certificates location and ensure that permissions are strict
      vars:
        _conf_files: "{{ certificates_opt_mapping | selectattr('name', 'search', '.conf') }}"
      copy:
        src: "{{ pki.location }}/csr/{{ item.name }}.key"
        remote_src: true
        dest: "{{ item.target }}.key"
        owner: root
        group: root
        mode: u=rw
      loop: "{{ certificates_opt_mapping | difference(_conf_files) }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Update conf files with embedded certs
      vars:
        _kubeconfig_cn_mapping:
          admin.conf: "kubernetes-admin"
          scheduler.conf: "system:kube-scheduler"
          controller-manager.conf: "system:kube-controller-manager"
        conf_files_to_update: "{{ _kubeconfig_cn_mapping.keys() | intersect() }}"
      block:
        - name: Slurp kubeconfig files
          slurp:
            src: "{{ pki.location }}/csr/{{ item }}"
          register: kubeconfig_files_content
          loop: "{{ _kubeconfig_cn_mapping.keys() | intersect(certificates_renewal_list) }}"

        - name: Create kubeconfig key files
          vars:
            _content: "{{ config_file.content | b64decode | from_yaml }}"
          copy:
            content: "{{ _content.users.0.user['client-key-data'] | b64decode }}"
            dest: "{{ pki.location }}/{{ config_file.item }}.key"
            owner: root
            group: root
            mode: u=rw
          loop: "{{ kubeconfig_files_content.results }}"
          loop_control:
            loop_var: config_file
            label: "{{ config_file.item }}"

        - name: Update conf files with embedded certs
          environment:
            KUBECONFIG: "/etc/kubernetes/{{ item.key }}"
          command: |-
            kubectl config set-credentials {{ item.value }} \
              --client-key {{ item.key }}.key \
              --client-certificate {{ item.key }}.crt --embed-certs
          args:
            chdir: "{{ pki.location }}"
          loop: "{{ _kubeconfig_cn_mapping | dict2items | selectattr('key', 'in', certificates_renewal_list) }}"

    - name: Remove conf certificates and temporary directories
      file:
        path: "{{ pki.location }}/{{ item }}"
        state: absent
      loop:
        - 'admin.conf.crt'
        - 'admin.conf.key'
        - 'scheduler.conf.crt'
        - 'scheduler.conf.key'
        - 'controller-manager.conf.crt'
        - 'controller-manager.conf.key'
        - 'csr'
        - 'ext'

  rescue:
    - name: Restore certificates
      synchronize:
        src: "{{ pki_backup_dir }}/"
        dest: "{{ pki.location | regex_replace('\\/$', '') }}"
      delegate_to: "{{ inventory_hostname }}"

    - name: Fail certificates generation
      fail:
        msg: Certificates generation failed, restored an initial state

- name: Restart systemd services
  when:
    - services_to_restart is defined
    - services_to_restart | difference(['containerd', 'kubelet']) | length == 0
  block:
    - name: Restart services
      systemd:
        name: "{{ item }}"
        state: restarted
      loop: "{{ services_to_restart }}"

    - name: Wait until cluster is available
      command: kubectl cluster-info
      retries: 60
      delay: 1
      register: result
      until: result is succeeded and "running" in result.stdout
