---
- name: Initialize list of users
  set_fact:
    users:
      - admin
      - operator
      - reader

- name: Get tokens from the server
  shell: |-
    kubectl get secret/$(kubectl get sa {{ item }} --namespace kube-system --output jsonpath='{.secrets[0].name}') \
      --namespace kube-system \
      --output jsonpath='{.data.token}'
  register: token_results
  loop: "{{ users }}"
  no_log: true

- name: Encrypt tokens
  delegate_to: localhost
  become: false
  environment:
    ANSIBLE_VAULT_PASSWORD_FILE: "{{ vault_tmp_file_location }}"
  command: |
    ansible-vault encrypt_string "{{ item.stdout }}"
  register: tokens_encrypted
  loop: "{{ token_results.results }}"
  no_log: true

- name: Combine tokens with users
  set_fact:
    user_credentials: >-
      {{ user_credentials | default([]) + [dict(name=item.0, token=item.1.stdout)] }}
  loop: >-
    {{ users | zip(tokens_encrypted.results) | list }}
  no_log: true

- name: Get kubeconfig settings
  command: |
    kubectl config view \
      --flatten \
      --minify
  register: config_result
  no_log: true

- name: Set kubeconfig settings variable
  set_fact:
    kubeconfig_settings: >-
      {{ config_result.stdout | from_yaml }}

- name: Encrypt CA data
  delegate_to: localhost
  become: false
  environment:
    ANSIBLE_VAULT_PASSWORD_FILE: "{{ vault_tmp_file_location }}"
  command: |
    ansible-vault encrypt_string "{{ item.cluster['certificate-authority-data'] }}"
  register: clusters_ca_data
  loop: "{{ kubeconfig_settings.clusters }}"
  no_log: true

- name: Set encrypted CA data variable
  set_fact:
    clusters_ca_data_encrypted: >-
      {{ clusters_ca_data.results | list }}

- name: Create credentials file
  delegate_to: localhost
  become: false
  template:
    src: kubernetes-secrets.yml.j2
    dest: "{{ vault_location }}/kubernetes-secrets.yml"
    mode: u=rw,go=r
