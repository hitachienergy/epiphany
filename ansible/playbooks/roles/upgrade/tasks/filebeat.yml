---
- name: Filebeat | Load defaults from filebeat role
  include_vars:
    file: roles/filebeat/defaults/main.yml
    name: filebeat_defaults

- name: Filebeat | Load filebeat role manifest
  include_vars:
    file: roles/filebeat/vars/manifest.yml
    name: filebeat_manifest

- name: Filebeat on k8s | Prepare fact about helm release and reinstall daemonset if release exists
  delegate_to: localhost
  become: false
  run_once: true
  when:
    - k8s_as_cloud_service is defined
    - k8s_as_cloud_service
  block:
    - name: Filebeat on k8s | Get information about helm releases
      command: helm list --output json
      register: helm_list

    - name: Filebeat on k8s | Check if filebeat release exist in default namespace and set fact
      set_fact:
        filebeat_release_exists: >-
          {{ _names | ternary(true, false) }}
      vars:
        _names: >-
          {{ helm_list.stdout | from_json
                              | map(attribute='name')
                              | select('==', filebeat_defaults.filebeat_helm_chart_name)
                              | list }}

    - name: Filebeat on k8s | Reinstall Filebeat as DaemonSet from default namespace to dedicated
      when:
        - filebeat_release_exists
      block:
        - name: Filebeat on k8s | Include uninstall task for Filebeat in default namespace
          include_role:
            name: filebeat
            tasks_from: uninstall-filebeat-as-daemonset.yml

        - name: Filebeat on k8s | Include install task for Filebeat in dedicated namespace
          include_role:
            name: filebeat
            tasks_from: install-filebeat-as-daemonset.yml

- name: Filebeat as OS service | Get information about installed packages as facts
  package_facts:
    manager: auto
  when: ansible_facts.packages is undefined

- name: Filebeat as OS service | Test if filebeat package is installed
  assert:
    that: ansible_facts.packages['filebeat'] is defined
    fail_msg: filebeat package not found, nothing to update
    quiet: true

- name: Filebeat as OS service | Print versions
  debug:
    msg:
      - "Installed version: {{ ansible_facts.packages['filebeat'][0].version }}"
      - "Target version: {{ filebeat_version }}"

- name: Update Filebeat as OS service
  when:
    - filebeat_version is version(ansible_facts.packages['filebeat'][0].version, '>=')
  block:
    - name: Filebeat as OS service | Backup configuration file (filebeat.yml)
      copy:
        remote_src: true
        src: /etc/filebeat/filebeat.yml
        dest: /etc/filebeat/filebeat.yml.bak_{{ ansible_facts.packages['filebeat'][0].version }}
        mode: u=rw,go=

    - name: Install Filebeat as system service
      import_role:
        name: filebeat
        tasks_from: install-filebeat-as-system-service

    - name: Configure auditd
      import_role:
        name: filebeat
        tasks_from: configure-auditd

    - name: Filebeat as OS service | Slurp /etc/filebeat/filebeat.yml
      slurp:
        src: /etc/filebeat/filebeat.yml
      register: _filebeat_config_yml
      no_log: true

    - name: Filebeat as OS service | Set filebeat.yml content as fact
      set_fact:
        _filebeat_existing_config: "{{ _filebeat_config_yml.content | b64decode | from_yaml }}"
      no_log: true

    - name: Configure Filebeat
      import_role:
        name: filebeat
        tasks_from: configure-filebeat
      vars:
        existing_output_es_password: >-
          {{ _filebeat_existing_config['output.elasticsearch'].password }}
        existing_setup_dashboards:
          enabled: >-
            {{ _filebeat_existing_config['setup.dashboards.enabled'] | default(False) }}
          index: >-
            {{ _filebeat_existing_config['setup.dashboards.index'] | default("null") }}
        existing_setup_kibana: >-
          {{ _filebeat_existing_config['setup.kibana'] | default({}) }}
        # To provide settings for multiline feature (e.g. specification.postgresql_input.multiline)
        specification: >-
          {{ filebeat_manifest.specification }}
