---
- name: ODFE | Get information about installed packages as facts
  package_facts:
    manager: auto
  when: ansible_facts.packages is undefined

- name: ODFE | Assert that elasticsearch-oss package is installed
  assert:
    that: ansible_facts.packages['elasticsearch-oss'] is defined
    fail_msg: elasticsearch-oss package not found, nothing to upgrade
    quiet: true

- name: ODFE | Include defaults from opensearch role
  include_vars:
    file: roles/opensearch/defaults/main.yml
    name: odfe_defaults

- name: ODFE | Patch log4j
  include_role:
    name: opensearch
    tasks_from: patch-log4j
  when: odfe_defaults.log4j_file_name is defined

- name: Restart elasticsearch service
  systemd:
    name: elasticsearch
    state: restarted
  register: restart_elasticsearch
  when: odfe_defaults.log4j_file_name is defined and log4j_patch.changed

- name: ODFE | Print elasticsearch-oss versions
  debug:
    msg:
      - "Installed version: {{ ansible_facts.packages['elasticsearch-oss'][0].version }}"
      - "Target version: {{ odfe_defaults.versions[ansible_os_family].elasticsearch_oss }}"

# If state file exists it means the previous run failed
- name: ODFE | Check if upgrade state file exists
  stat:
    path: "{{ opensearch.upgrade_state_file_path }}"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: stat_upgrade_state_file

- name: ODFE | Upgrade Elasticsearch and ODFE plugins (part 1/2)
  include_tasks: opensearch/upgrade-opensearch-01.yml
  when:  _target_version is version(ansible_facts.packages['elasticsearch-oss'][0].version, '>')
     or (_target_version is version(ansible_facts.packages['elasticsearch-oss'][0].version, '==')
         and stat_upgrade_state_file.stat.exists)
  vars:
    _target_version: "{{ odfe_defaults.versions[ansible_os_family].elasticsearch_oss }}"
