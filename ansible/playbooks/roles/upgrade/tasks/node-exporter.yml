---
- name: Node Exporter | Include defaults from node_exporter role
  include_vars:
    file: roles/node_exporter/defaults/main.yml
    name: exporter_defaults

- name: Node Exporter | Include specification vars from node_exporter role
  include_vars:
    file: roles/node_exporter/vars/main.yml
    name: exporter_vars

- name: Node Exporter as DaemonSet | Prepare fact about helm release and reinstall daemonset if release exists
  delegate_to: localhost
  become: false
  run_once: true
  when:
    - k8s_as_cloud_service is defined
    - k8s_as_cloud_service
  block:
    - name: Get information about helm releases
      command: helm list --output json
      register: helm_list

    - name: Check if node exporter release exist in default namespace and set fact
      set_fact:
        node_exporter_release_exists: >-
          {{ _names | ternary(true, false) }}
      vars:
        _names: >-
          {{ helm_list.stdout | from_json
                              | map(attribute='name')
                              | select('==', exporter_defaults.node_exporter_helm_chart_name)
                              | list }}

    - name: Reinstall Node Exporter as DaemonSet from default namespace to dedicated namespace for "k8s as cloud service"
      when:
        - node_exporter_release_exists
      block:
        - name: Include uninstall task for Node Exporter as DaemonSet in default namespace for "k8s as cloud service"
          include_role:
            name: node_exporter
            tasks_from: uninstall-node-exporter-as-daemonset.yml

        - name: Include install task for Node Exporter as DaemonSet in dedicated namespace for "k8s as cloud service"
          include_role:
            name: node_exporter
            tasks_from: install-node-exporter-as-daemonset.yml
          vars:
            specification: "{{ exporter_vars.specification }}"

- name: Node Exporter as System Service | Populate service facts
  service_facts:
  when: ansible_facts.services is undefined

- name: Node Exporter as System Service | Test if node exporter service is configured
  assert:
    that: "'{{ exporter_defaults.exporter.service.name }}.service' in ansible_facts.services"
    fail_msg: "{{ exporter_defaults.exporter.service.name }} service is not found"
    quiet: true

- name: Node Exporter as System Service | Set exporter_file_name fact
  set_fact:
    exporter_file_name: "{{ exporter_defaults.exporter.service.file_name[ansible_architecture] }}"

- name: Node Exporter as System Service | Collect version
  shell: >-
    /opt/node_exporter/node_exporter --version 2>&1
  register: exporter_current_version_out

- name: Node Exporter as System Service | Set exporter_current_version fact
  set_fact:
    exporter_current_version: "{{ exporter_current_version_out.stdout_lines[0] | regex_replace('^.*version ([0-9.]+) .*$', '\\1') }}"

- name: Node Exporter as System Service | Print version
  debug:
    msg:
      - "Installed version: {{ exporter_current_version }}"
      - "Target version: {{ exporter_defaults.exporter.version }}"

- name: Node Exporter as System Service | Upgrade block
  when: exporter_defaults.exporter.version != exporter_current_version
  block:
    - name: Node Exporter | Download binaries
      include_role:
        name: download
        tasks_from: download_file
      vars:
        file_name: "{{ exporter_file_name }}"

    - name: Node Exporter as System Service | Stop exporter
      systemd:
        name: "{{ exporter_defaults.exporter.service.name }}.service"
        state: stopped

    - name: Node Exporter as System Service | Remove /opt/node_exporter directory
      file:
        path: /opt/node_exporter
        state: absent

    - name: Node Exporter as System Service | Create empty /opt/node_exporter directory
      file:
        path: /opt/node_exporter
        owner: root
        group: node_exporter
        mode: u=rwx,g=rx,o=
        state: directory

    - name: Node Exporter as System Service | Create /var/lib/prometheus/node-exporter/textfile_collector directory
      file:
        path: /var/lib/prometheus/node-exporter/textfile_collector
        owner: root
        group: node_exporter
        mode: u=rwx,g=rx,o=
        state: directory

    - name: Node Exporter as System Service | Unpack binary
      unarchive:
        remote_src: true
        src: "{{ download_directory }}/{{ exporter_file_name }}"
        dest: /opt/node_exporter
        creates: /opt/node_exporter/node_exporter
        extra_opts: [--strip-components=1]
        mode: u=rwx,go=rx
        owner: root
        group: node_exporter
      check_mode: false

    - name: Node Exporter as System Service | Update systemd service configuration
      template:
        src: roles/node_exporter/templates/prometheus-node-exporter.service.j2
        dest: /etc/systemd/system/{{ exporter_defaults.exporter.service.name }}.service
        owner: root
        group: root
        mode: u=rw,go=r
      vars:
        exporter_service_description: "{{ exporter_defaults.exporter.service.description }}"
        specification: "{{ exporter_vars.specification }}"

    - name: Node Exporter as System Service | Start exporter
      systemd:
        daemon_reload: true
        enabled: true
        name: "{{ exporter_defaults.exporter.service.name }}.service"
        state: started
