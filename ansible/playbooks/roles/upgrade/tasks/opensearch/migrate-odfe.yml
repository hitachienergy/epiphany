---
- name: OPS | Get information about installed packages as facts
  package_facts:
    manager: auto
  when: ansible_facts.packages is undefined

- name: OPS | Print elasticsearch ond opensearch versions
  debug:
    msg:
      - "Elasticsearch version curently installed: {{ ansible_facts.packages['elasticsearch-oss'][0].version }}"
      - "Opensearch version to be installed: {{ ops_defaults.versions[ansible_os_family].ops_version }}"

- name: ODFE migr | Ensure elasticsearch service is running
  systemd:
    name: elasticsearch
    enabled: yes
    state: started
  register: elasticsearch_state

- include_tasks: opensearch/utils/get-config-from-files.yml  # Sets 'existing_config' fact

- name: ODFE migr | Set common facts
  set_fact:
    certificates:      "{{ ops_defaults.certificates }}"
    es_host:           "{{ existing_config.main['network.host']   | default('_local_') }}"
    es_http_port:      "{{ existing_config.main['http.port']      | default(ops_defaults.ports.http) }}"
    es_transport_port: "{{ existing_config.main['transport.port'] | default(ops_defaults.ports.transport) }}"
    es_clustered:      "{{ (existing_config.main['discovery.seed_hosts'] | length > 1) | ternary(True, False) }}"
    es_node_name:      "{{ existing_config.main['node.name'] }}"

- name: ODFE migr | Assure Elastisearch files location will be used
  set_fact:
    certificates:
      dirs:
        certs:  "/etc/elasticsearch"
        ca_key: "/etc/elasticsearch/private"
        csr:    "/etc/elasticsearch/csr"
      files:
        admin:
          cert: "epiphany-admin.pem"
          key:  "epiphany-admin-key.pem"

- name: ODFE migr | Prepare for ODFE to OPS migration
  include_tasks:
    file: opensearch/utils/prepare-cluster-for-node-restart.yml
    apply:
      delegate_to: "{{ target_inventory_hostname }}"
      delegate_facts: true
  loop: "{{ ansible_play_hosts_all }}"
  loop_control:
    loop_var: target_inventory_hostname
  vars:
    es_api:
      cert_type: Epiphany
      cert_path: "{{ (certificates.dirs.certs, certificates.files.admin.cert) | path_join }}"
      key_path:  "{{ (certificates.dirs.certs, certificates.files.admin.key)  | path_join }}"
      url: https://{{ es_host }}:{{ es_http_port }}
    fail_msg: API access test failed.

- name: ODFE migr | Stop elasticsearch service
  systemd:
    name: elasticsearch
    enabled: yes
    state: stopped
  register: elasticsearch_state

- name: ODFE migr | Include defaults Opensearch binaries instalaltion
  include_vars:
    file: roles/opensearch/defaults/main.yml

- name: ODFE migr | Include vars for Opensearch binaries instalaltion
  include_vars:
    file: roles/opensearch/vars/main.yml

- name: ODFE migr | Inastall Opensearch binaries
  include_tasks: roles/opensearch/tasks/install-ops.yml

- name: ODFE migr | Copy ES directories to OPS directories
  copy:
    src: "{{ item.1 }}"
    dest: "{{ item.2 }}"
    remote_src: yes
    directory_mode: yes
  with_items:
  - { 1: "/var/lib/elasticsearch-snapshots", 2: "{{ specification.paths.ops_repo }}" }
  - { 1: "/var/lib/elasticsearch", 2: "{{ specification.paths.ops_data }}" }

- name: ODFE migr | Prepare a list of certs and keys to OPS directories
  find:
    paths: "/etc/elasticsearch/"
    patterns: "*pem"
  register: pem_files

- name: ODFE migr | Copy a list of certs and keys to OPS directories
  copy:
    src: "{{ item.path }}"
    dest: "{{ specification.paths.ops_conf_dir }}/"
    remote_src: yes
  with_items: "{{ pem_files.files }}"

- name: ODFE migr | Clone JVM configuration file
  copy:
    src: /etc/elasticsearch/jvm.options
    dest: "{{ specification.paths.ops_conf_dir }}/jvm.options"
    remote_src: yes
    owner: root
    group: opensearch
    mode: ug=rw,o=
    backup: yes

- name: ODFE migr | Update JVM configuration file
  replace:
    path: "{{ specification.paths.ops_conf_dir }}/jvm.options"
    regexp: "{{ item.1 }}"
    replace: "{{ item.2 }}"
  with_items:
  - { 1: 'elasticsearch', 2: 'opensearch' }
  - { 1: '\${ES_TMPDIR}', 2: '/tmp' }

- name: ODFE migr | Clone main configuration file
  copy:
    src: /etc/elasticsearch/elasticsearch.yml
    dest: "{{ specification.paths.ops_conf_dir }}/opensearch.yml"
    remote_src: yes
    owner: root
    group: opensearch
    mode: ug=rw,o=
    backup: yes

- name: ODFE migr | Update main configuration file
  replace:
    path: "{{ specification.paths.ops_conf_dir }}/opensearch.yml"
    regexp: "{{ item.1 }}"
    replace: "{{ item.2 }}"
  with_items:
    - { 1: 'elasticsearch', 2: 'opensearch' }
    - { 1: 'EpiphanyElastic', 2: 'EpiphanyOpensearch' }
    - { 1: 'opendistro_security.', 2: 'plugins.security.' }

- name: ODFE migr | Start opensearch service
  systemd:
    name: opensearch
    state: started
    enabled: yes
  register: restart_opensearch

- name: ODFE migr | Wait for opensearch to startup
  wait_for:
    port: 9200
    host: "{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"
    sleep: 6


- name: ODFE migr | Check if default admin user exists
  uri:
    url: "https://{{ inventory_hostname }}:{{ ports.http }}/_opendistro/_security/api/internalusers/admin"
    method: GET
    # 404 code is used there as someone can remove admin user on its own.
    status_code: [200, 404]
    validate_certs: no
    client_cert: "{{ certificates.dirs.certs }}/{{ certificates.files.admin.cert }}"
    client_key:  "{{ certificates.dirs.certs }}/{{ certificates.files.admin.key }}"
  register: admin_check_response
  until: admin_check_response is success
  retries: 60
  delay: 1
  run_once: true

- name: ODFE migr | Set Opensearch admin passwor
  uri:
    url: "https://{{ inventory_hostname }}:{{ ports.http }}/_opendistro/_security/api/internalusers"
    method: PATCH
    status_code: [200]
    body:
      - op: "replace"
        path: "/admin"
        value:
          password: "{{ specification.ops_password }}"
          reserved: "true"
          backend_roles:
            - "admin"
          description: "Admin user"
    client_cert: "{{ certificates.dirs.certs }}/{{ certificates.files.admin.cert }}"
    client_key:  "{{ certificates.dirs.certs }}/{{ certificates.files.admin.key }}"
    body_format: json
    validate_certs: no
  register: uri_response
  until: uri_response is success
  retries: 5
  delay: 1
  run_once: true
  when: admin_check_response.status == 200

- name: ODFE migr | Check if kibanaserver user exists
  uri:
    url: "https://{{ inventory_hostname }}:{{ ports.http }}/_opendistro/_security/api/internalusers/kibanaserver"
    method: GET
    # 404 code is used there as someone can remove admin user on its own.
    status_code: [200, 404]
    validate_certs: no
    client_cert: "{{ certificates.dirs.certs }}/{{ certificates.files.admin.cert }}"
    client_key:  "{{ certificates.dirs.certs }}/{{ certificates.files.admin.key }}"
  register: kibanaserver_check_response
  until: kibanaserver_check_response is success
  retries: 60
  delay: 1
  run_once: true

- name: ODFE migr | Set kibanaserver user password
  uri:
    url: "https://{{ inventory_hostname }}:{{ ports.http }}/_opendistro/_security/api/internalusers"
    method: PATCH
    status_code: [200]
    body:
      - op: "replace"
        path: "/kibanaserver"
        value:
          password: "{{ specification.kibanaserver_password }}"
          reserved: "true"
          description: "kibanaserver user"
    client_cert: "{{ certificates.dirs.certs }}/{{ certificates.files.admin.cert }}"
    client_key:  "{{ certificates.dirs.certs }}/{{ certificates.files.admin.key }}"
    body_format: json
    validate_certs: no
  register: uri_response
  until: uri_response is success
  retries: 5
  delay: 1
  run_once: true
  when: kibanaserver_check_response.status == 200

- name: ODFE migr | Check the opensearch status
  command: curl https://{{ inventory_hostname }}:{{ ports.http }}/_cluster/health?pretty -u 'admin:{{ specification.admin_password }}' -k
  register: ops_status

- name: ODFE migr | Show the opensearch status
  debug:
    msg: "{{ ops_status.stdout }}"
  failed_when: "'number_of_nodes' not in ops_status.stdout"

- name: ODFE migr | Reenable shard allocation for the cluster
  include_tasks:
    file: opensearch/utils/enable-shard-allocation.yml
    apply:
      delegate_to: "{{ target_inventory_hostname }}"
      delegate_facts: true
  loop: "{{ ansible_play_hosts_all }}"
  loop_control:
    loop_var: target_inventory_hostname
  vars:
    es_api:
      cert_type: Epiphany
      cert_path: "{{ (certificates.dirs.certs, certificates.files.admin.cert) | path_join }}"
      key_path:  "{{ (certificates.dirs.certs, certificates.files.admin.key)  | path_join }}"
      url: https://{{ es_host }}:{{ es_http_port }}
    fail_msg: API access test failed.
