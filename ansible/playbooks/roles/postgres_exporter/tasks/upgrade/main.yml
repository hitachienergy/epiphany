---
- name: Check for upgrade flag file
  stat:
    path: "{{ lock_file }}"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: lock_file_status

- name: Preflight check
  when: not lock_file_status.stat.exists
  block:
  - name: Check for binary existance
    stat:
      path: "{{ exporter.binary_path }}"
      get_attributes: false
      get_checksum: false
      get_mime: false
    register: postgres_exporter_binary

  - name: Inform and fail if postgres-exporter binary is missing
    when: not postgres_exporter_binary.stat.exists
    fail:
      msg: >
        There is no postgres-exporter binary at all,
        re-apply your configuration or remove postgres_exporter role from inventory

  - name: Verify installed version
    shell: /opt/postgres_exporter/postgres_exporter --version 2>&1 | grep postgres_exporter
    register: postgres_exporter_current_version

  - name: Set version facts
    set_fact:
      postgres_exporter_version:
        old: "{{ postgres_exporter_current_version.stdout_lines[0] | regex_search('\\d+\\.\\d+\\.\\d+') }}"
        new: "{{ exporter.version }}"

  - name: Avoiding risk of downgrade
    when: postgres_exporter_version.old is not version( postgres_exporter_version.new, '<' )
    debug:
      msg: "Skipping upgrade: Postgres-exporter in the same or newer version already installed!"

- name: Postgres-exporter | Run upgrade tasks
  when: lock_file_status.stat.exists or postgres_exporter_version.old is version( postgres_exporter_version.new, '<' )
  block:
  - name: Create upgrade flag file
    copy:
      dest: "{{ lock_file }}"
      content: Upgrade started
      mode: u=rw,g=r,o=

  - name: Include specification vars from postgres_exporter role
    include_vars:
      file: roles/postgres_exporter/vars/main.yml
      name: exporter_vars

  - name: Set postgres-exporter file name to install
    set_fact:
      exporter_file_name: "{{ exporter.file_name[ansible_architecture] }}"

  - name: Download postgres-exporter binaries
    include_role:
      name: download
      tasks_from: download_file
    vars:
      file_name: "{{ exporter_file_name }}"

  - name: Delete old version
    file:
      state: absent
      path: "/opt/postgres_exporter/postgres_exporter"

  - name: Unpack postgres-exporter binary
    become: true
    unarchive:
      remote_src: yes
      src: "{{ download_directory }}/{{ exporter_file_name }}"
      dest: "/opt/postgres_exporter"
      creates: "/opt/postgres_exporter/postgres_exporter"
      extra_opts: [--strip-components=1]
      mode: u=rwx,go=rx
      owner: root
      group: postgres_exporter
    check_mode: false

  - name: Replace postgres-exporter service definition
    template:
      src: postgres-exporter.service.j2
      dest: /etc/systemd/system/postgres-exporter.service
      owner: root
      group: root
      mode: u=rw,go=r

  - name: Reload systemd postgres-exporter service
    systemd:
      state: restarted
      daemon_reload: true
      name: postgres-exporter.service

  - name: Remove upgrade flag file
    file:
      path: "{{ lock_file }}"
      state: absent
