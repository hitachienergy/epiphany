---
# This file is used only for upgrade mode to free disk space

- name: Load vars from old manifest
  include_vars:
    file: "{{ lookup('first_found', params) }}"
    name: old_manifest
  vars:
    params:
      files:
        - manifest.yml
        - main.yml
      paths:
        - vars

- name: Set fact on epirepo directory path
  set_fact:
    _apache_epirepo_path: "{{ old_manifest.specification.apache_epirepo_path | default('/var/www/html/epirepo') }}"

- name: Get list of files in epirepo
  find:
    paths:
      - "{{ item }}"
    hidden: true
  register: files_in_epirepo
  loop:  # loop used by purpose to have separated results
    - "{{ _apache_epirepo_path }}/files"
    - "{{ _apache_epirepo_path }}/grafana-dashboards"
    - "{{ _apache_epirepo_path }}/images"

- name: Create full list of files
  set_fact:
    all_files: "{{ _all_files }}"
  vars:
    _reqs_file_keys: "{{ _file_reqs['files'].keys() | list }}"
    _reqs_distro_file_keys: "{{ _distro_file_reqs['files'].keys() | list }}"
    _all_files: _reqs_file_keys | union(_reqs_distro_file_keys)

- name: Remove old files from epirepo
  file:
    state: absent
    path: "{{ _apache_epirepo_path }}/files/{{ item }}"
  vars:
    files_to_preserve: "{{ all_files | select('match', 'https?://')
                                     | map('regex_replace', '\\s+#.*$', '')
                                     | map('trim')
                                     | map('regex_replace', '^.+[/\\s](?P<filename>[\\S]+)$', '\\g<filename>') }}"
    files_found: "{{ files_in_epirepo.results[0].files | map(attribute='path')
                                                       | map('basename') }}"
    files_to_remove: "{{ files_found | difference(files_to_preserve) }}"
  loop: "{{ files_to_remove }}"

- name: Load variables from "image_registry" role  # generated also in upgrade mode
  include_vars:
    file: roles/image_registry/vars/main.yml
    name: image_registry_vars

- name: Remove old images from epirepo
  file:
    state: absent
    path: "{{ _apache_epirepo_path }}/images/{{ item }}"
  vars:
    images_found: "{{ files_in_epirepo.results[1].files | map(attribute='path') | map('basename') }}"
    images_to_load: "{{ image_registry_vars.specification.images_to_load[ansible_architecture] }}"
    images_to_preserve: "{{ images_to_load | json_query('*[].file_name') + [ image_registry_vars.specification.registry_image.file_name ] }}"
    # images to remove since they may have the same filename but different content (e.g. jboss/keycloak vs epiphanyplatform/keycloak),
    # to be optimized (checksums)
    replaced_images: "{{ images_to_load | json_query('*[]') | selectattr('name', 'match', 'epiphanyplatform/')
                                                            | map(attribute='file_name') }}"
    images_to_remove: "{{ images_found | difference(images_to_preserve) + replaced_images }}"
  loop: "{{ images_to_remove }}"

# Remove all packages since it's not so easy to determine filenames based on the requirements file.
- name: Remove all packages from epirepo
  file:
    state: absent
    path: "{{ _apache_epirepo_path }}/packages"

# Only for epicli < 0.7
- name: Remove leftovers from /tmp
  block:
    - name: Find leftovers in /tmp
      find:
        paths: /tmp
        patterns:
          - keycloak*.tar
          - etcd*.tar
          - node*.tar
          - dashboard*.tar
          - cni*.tar
          - kube-apiserver*.tar
          - rabbitmq*.tar
          - kube-controller-manager*.tar
          - pgpool*.tar
          - kube-proxy*.tar
          - pod2daemon-flexvol*.tar
          - kube-scheduler*.tar
          - flannel*.tar
          - kube-controllers*.tar
          - coredns*.tar
          - metrics-scraper*.tar
          - registry*.tar
          - pgbouncer*.tar
      register: files_to_delete

    - name: Remove leftovers from /tmp
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ files_to_delete.files }}"
      loop_control:
        label: "{{ item.path }}"
