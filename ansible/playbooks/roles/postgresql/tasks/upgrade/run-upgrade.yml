---
# Upgrade procedure based on steps from: https://www.postgresql.org/docs/13/pgupgrade.html

# Flow:
# 1) Run prepare-upgrade tasks on all nodes in parallel (rollback unneeded)
# 2) Upgrade primary node (rollback supported)
# 3) Upgrade standby nodes in parallel - run only if primary node has been upgraded (rollback not supported)
# 4) Run post-upgrade tasks on all nodes

- name: Create upgrade state file
  copy:
    dest: "{{ old_version.pg.upgrade.state_file_path }}"
    content: Upgrade started
    mode: u=rw,g=r,o=

# Set facts:
# 1) nodes
#    - is_primary_node
#    - is_standby_node
#    - pg_custom_tablespace_locations
#    - pg_primary_node
# 2) extensions
#    - is_pgaudit_used
#    - is_repmgr_used
- include_tasks: upgrade/nodes/common/set-facts.yml

# Run pre-upgrade tasks that are common for all nodes and do not require rollback:
# - Install the new PostgreSQL binaries
# - Initialize the new PostgreSQL cluster (primary node only)
# - Install custom shared object files (extension packages)
# - Adjust authentication
# - Copy configuration files
- include_tasks: upgrade/nodes/common/prepare-upgrade.yml

# Till here there is no need to rollback anything on failure

- name: Upgrade primary node
  when: is_primary_node
  vars:
    _node_role: primary
    pg_upgrade_working_dir: "{{ new_version.pg.base_dir[ansible_os_family] }}/upgrade/{{ new_version.pg.version }}"
  block:
    - name: primary | Create upgrade working directory
      become_user: postgres  # must be writable by postgres user
      file:
        path: "{{ pg_upgrade_working_dir }}"
        state: directory
        mode: u=rwx,go=rx

    - name: Tasks with rollback support
      block:
        - include_tasks: upgrade/nodes/primary/main.yml
      rescue: #  rescue block is run at the end of play - after tasks on other hosts
        - debug:
            msg: "ROLLBACK triggered by failed task: '{{ ansible_failed_task.name }}'"

        - include_tasks: upgrade/nodes/primary/rollback.yml

        - name: primary | Fail upgrade with a note
          fail:
            msg: PostgreSQL upgrade failed, please check logs

    # Disable old PostgreSQL service and enable new one
    - include_tasks: upgrade/nodes/common/switch-to-new-pg-service.yml

    - name: repmgr
      when: is_repmgr_used
      block:
        - include_tasks: upgrade/extensions/replication/pg-new/update-symlink-repmgr-conf.yml
        - include_tasks: upgrade/extensions/replication/pg-new/primary-register.yml
        - include_tasks: upgrade/extensions/replication/pg-new/update-symlink-repmgr-bin.yml
        - include_tasks: upgrade/extensions/replication/pg-new/update-repmgrd-config.yml
        - include_tasks: upgrade/extensions/replication/pg-new/start-and-enable-service.yml

    # Post-upgrade tasks
    - include_tasks: upgrade/nodes/primary/cleanup.yml
    - include_tasks: upgrade/nodes/common/cleanup.yml

    # Remove upgrade state file (marker for stanby nodes that upgrade of primary succeeded)
    - include_tasks: upgrade/nodes/common/remove-state-file.yml

# Do not upgrade standby nodes if primary failed
- name: Check if upgrade state file exists on primary node
  stat:
    path: "{{ old_version.pg.upgrade.state_file_path }}"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: stat_upgrade_state_file_on_primary
  delegate_to: "{{ pg_primary_node }}"
  run_once: true

- name: Upgrade standby nodes
  when:
    - is_repmgr_used
    - is_standby_node
  vars:
    _node_role: standby
  block:
    - name: Assert there was no failure on primary node
      assert:
        that: not stat_upgrade_state_file_on_primary.stat.exists
        fail_msg: No failure on primary node is required to continue
        quiet: true

    # Do not clone standby if there is no new PG running on primary node
    - name: Check if PostgreSQL {{ new_version.pg.version }} is running on primary node
      postgresql_info:
        filter: version
      register: primary_node_pg_info
      become: true
      become_user: postgres
      delegate_to: "{{ pg_primary_node }}"
      # run_once cannot be used here since the task may be assigned to primary node which is skipped

    - name: Assert PostgreSQL version on primary node
      assert:
        that: primary_node_pg_info.version.major == new_version.pg.version
        quiet: true

    - include_tasks: upgrade/extensions/replication/pg-new/update-symlink-repmgr-conf.yml

    - name: Upgrade standby servers (clone standby node from primary and register)
      include_tasks: upgrade/extensions/replication/pg-new/standby-clone.yml

    # Disable old PostgreSQL service and enable new one
    - include_tasks: upgrade/nodes/common/switch-to-new-pg-service.yml

    - include_tasks: upgrade/extensions/replication/pg-new/update-symlink-repmgr-bin.yml
    - include_tasks: upgrade/extensions/replication/pg-new/update-repmgrd-config.yml
    - include_tasks: upgrade/extensions/replication/pg-new/start-and-enable-service.yml

    # Post-upgrade tasks
    - include_tasks: upgrade/nodes/common/cleanup.yml

    # Remove upgrade state file
    - include_tasks: upgrade/nodes/common/remove-state-file.yml
