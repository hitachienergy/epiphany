---
- name: Set if 'replication' is enabled
  set_fact:
    spec:
      extensions:
        replication:
          enabled:
            "{{ ansible_architecture == 'x86_64' and groups['postgresql'] | length > 1 }}"

- name: Combine 'replication' with 'specification'
  set_fact:
    specification: "{{ specification | combine(spec, list_merge='append', recursive=True) }}"

- name: Set 'enabled_extensions' fact
  set_fact:
    enabled_extensions: >-
      {{ _defined_enabled_extensions + _undefined_extensions }}
  vars:
    _defined_enabled_extensions: >-
      {{ specification.extensions
          | dict2items(key_name='name', value_name='config')
          | selectattr('config.enabled', 'defined')
          | selectattr('config.enabled')
          | map(attribute='name')
          | list }}
    _undefined_extensions: >-
      {{ specification.extensions
          | dict2items(key_name='name', value_name='config')
          | selectattr('config.enabled', 'undefined')
          | map(attribute='name')
          | list }}

- name: Check if repmgr.conf exists
  stat:
    path: "{{ repmgr.config_dir[ansible_os_family] }}/repmgr.conf"
  register: repmgr_conf

- name: Get node id
  when: repmgr_conf.stat.exists
  command: >-
    grep -Po '(?<=^node_id=)\d+' "{{ repmgr.config_dir[ansible_os_family] }}/repmgr.conf"
  register: repmgr_pg_node_id
  changed_when: false

# Node id is a constant value independent on order in Ansible host group
- name: Set 'pg_node_id' fact
  set_fact:
    pg_node_id: >-
      {{ repmgr_conf.stat.exists | ternary(repmgr_pg_node_id.stdout, groups.postgresql.index(inventory_hostname) + 1) }}

- name: Install OS-specific packages
  package:
    name: "{{ pg.packages.common[ansible_os_family] + pg.packages.version_specific[ansible_os_family] }}"
    state: present
  module_defaults:
    yum: { lock_timeout: "{{ yum_lock_timeout }}" }

# Extension packages need to be installed first to be able to process PostgreSQL config
- name: Install extension packages
  include_tasks: extensions/{{ extension }}/packages.yml
  loop_control:
    loop_var: extension
  loop: "{{ enabled_extensions }}"

- name: Create directories and ensure correct permissions
  file:
    path: "{{ path }}"
    state: directory
    owner: postgres
    group: postgres
    mode: u=rwx,g=,o=
  loop_control:
    loop_var: path
  loop:
    - /var/log/postgresql
    - "{{ pg.data_dir[ansible_os_family] }}" # Permissions should be u=rwx (0700) or u=rwx,g=rx (0750)

- name: Configure ssh for 'postgres' user
  when: groups['postgresql']|length > 1
  vars:
    username: postgres
  include_tasks: helpers/configure-ssh-access.yml

- name: RedHat | Initialize database
  when: ansible_os_family == 'RedHat'
  block:
    - name: RedHat | Check initialization status
      stat:
        path: "{{ pg.config_dir[ansible_os_family] }}/pg_hba.conf"
      register: pg_hba_conf_stat

    - name: RedHat | Initialize database
      become_user: postgres
      when: not pg_hba_conf_stat.stat.exists
      command: "{{ pg.bin_dir[ansible_os_family] }}/initdb"
      environment:
        PGDATA: "{{ pg.data_dir[ansible_os_family] }}"

- name: Start and enable PostgreSQL service
  block:
    - name: Start and enable PostgreSQL service
      systemd:
        name: "{{ pg.service_name[ansible_os_family] }}"
        state: started
        enabled: true

    - &ensure-debian-child-service-started
      name: Debian | Ensure that instantiated service started
      when: ansible_os_family == 'Debian'
      systemd:
        name: "{{ pg.instantiated_service_name[ansible_os_family] }}"
        state: started

# Used in postgresql-epiphany.conf.j2
- name: Set runtime_shared_preload_libraries fact
  block:
    - name: Get PostgreSQL settings
      become_user: postgres
      postgresql_info:
        filter: settings
      register: postgresql_info

    - name: Set runtime_shared_preload_libraries fact
      set_fact:
        runtime_shared_preload_libraries: "{{ postgresql_info.settings.shared_preload_libraries.setting }}"

- name: Copy PostgreSQL configuration files
  vars:
    _specification: "{{ specification }}"
    _pg_data_dir: "{{ pg.data_dir[ansible_os_family] }}" # used in postgresql.conf
    _files:
      - pg_hba.conf
      - postgresql-epiphany.conf
      - postgresql.conf
  template:
    src: "{{ file_name }}.j2"
    dest: "{{ pg.config_dir[ansible_os_family] }}/{{ file_name }}"
    owner: postgres
    group: postgres
    mode: u=rw,g=,o=
    backup: true
  loop_control:
    loop_var: file_name
  loop: "{{ _files }}"
  register: change_pg_config

- name: Restart PostgreSQL service if configuration changed
  block:
    - name: Restart PostgreSQL service if configuration changed
      systemd:
        name: "{{ pg.service_name[ansible_os_family] }}"
        state: restarted

    - *ensure-debian-child-service-started
  when: (change_pg_config.results | map(attribute='changed') | list) is any

- name: Configure PostgreSQL logrotate
  block:
    - name: Remove logrotate configuration provided by 'postgresql-common' package
      file:
        path: /etc/logrotate.d/postgresql-common
        state: absent
      when: ansible_os_family == 'Debian'

    - name: Create PostgreSQL logrotate configuration file
      template:
        src: logrotate-postgresql.conf.j2
        dest: /etc/logrotate.d/postgresql
        owner: root
        group: root
        mode: u=rw,g=r,o=r

- name: Include extensions
  include_tasks: extensions/{{ extension }}/extension.yml
  loop_control:
    loop_var: extension
  loop: "{{ enabled_extensions }}"

# PgPool is configured only if such K8s application is enabled
- name: Extensions | Include PgPool vars from applications role
  include_vars:
    file: roles/applications/vars/main.yml
    name: applications_role_config
  when:
    - "'applications' in roles_with_generated_vars"

- name: Extensions | Set up PgPool
  vars:
    pgpool: >-
      {{ applications_role_config.specification.applications | default([])
                                                             | selectattr("name", "equalto", "pgpool")
                                                             | selectattr('enabled')
                                                             | map(attribute='pgpool')
                                                             | list
                                                             | first
                                                             | default({}) }}
  block:
    - name: Extensions | Set up PgPool | Ascertain primary node
      become_user: postgres
      postgresql_info:
        filter: in_recovery
      register: in_recovery_state

    - name: Extensions | Include PgPool setup tasks
      include_tasks: extensions/pgpool/extension.yml
      when:
        - not in_recovery_state.in_recovery
  when:
    - pgpool.keys()|length > 0
