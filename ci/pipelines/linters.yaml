---
trigger:
  branches:
    include:
      - develop

pr:
  branches:
    include:
      - develop

pool:
  name: $(agentPoolName)

variables:
  ansible_lint_error_threshold: 338
  pylint_score_cli_threshold: 9.51
  pylint_score_tests_threshold: 9.78
  rubocop_linter_threshold: 183

jobs:
  - job: Run_linters
    displayName: Run linters
    steps:
      - task: UsePythonVersion@0
        displayName: Use Python 3.10
        # To be compatible with the epicli's parent image (python:3.10-slim).
        inputs:
          versionSpec: 3.10

      - task: Bash@3
        displayName: Install Ansible Lint and its dependencies
        # Installing Ansible 5.2.0 to be compatible with the epicli image.
        inputs:
          targetType: inline
          script: |
            pip install --upgrade ansible==5.2.0 ansible-lint ansible-lint-junit==0.16 lxml pip setuptools

      - task: Bash@3
        displayName: Run Ansible Lint
        inputs:
          targetType: inline
          script: |
            set -e
            if ansible-lint -p ansible --show-relpath --nocolor 1> ansible_lint_stdout 2> ansible_lint_stderr \
            || grep 'violation(s) that are fatal' ansible_lint_stderr; then
              # Suppress the next line when the "load-failure" bug in ansible-lint is solved
              # https://github.com/ansible/ansible-lint/issues/2217
              sed -i '/load-failure/d' ansible_lint_stdout
              error_count=$(wc -l < ansible_lint_stdout)
              # Convert to junit
              ansible-lint-junit ansible_lint_stdout -o ansible_lint_output.xml
              test $error_count -le $(ansible_lint_error_threshold)
            else
              exit 1
            fi

      - task: PublishTestResults@2
        displayName: Publish Ansible Lint test results
        inputs:
          testResultsFiles: ansible_lint_output.xml
          searchFolder: $(System.DefaultWorkingDirectory)
          testRunTitle: Ansible Lint test results

      - task: Bash@3
        displayName: Install Pylint and its dependencies
        inputs:
          targetType: inline
          script: |
            pip install --upgrade pylint pylint-fail-under pylint-junit

      - task: Bash@3
        displayName: Run Pylint on CLI code
        inputs:
          targetType: inline
          script: |
            pylint ./cli \
            --rcfile .pylintrc \
            --fail-under=$(pylint_score_cli_threshold) \
            --output cli_code_results.xml

      - task: PublishTestResults@2
        displayName: Publish Pylint test results for CLI Code
        inputs:
          testResultsFiles: cli_code_results.xml
          searchFolder: $(System.DefaultWorkingDirectory)
          testRunTitle: Pylint test results for CLI Code

      - task: Bash@3
        displayName: Run Pylint on test code
        inputs:
          targetType: inline
          script: |
            pylint ./tests \
            --rcfile .pylintrc \
            --fail-under=$(pylint_score_tests_threshold) \
            --output test_code_results.xml \
            --disable=F0401 # Disable import-error checking

      - task: PublishTestResults@2
        displayName: Publish Pylint test results for test code
        inputs:
          testResultsFiles: test_code_results.xml
          searchFolder: $(System.DefaultWorkingDirectory)
          testRunTitle: Pylint test results for test code

      - task: Bash@3
        displayName: Install Rubocop and its dependencies
        inputs:
          targetType: inline
          script: |
            set -e
            apt-get -y update
            apt-get -y install rubygems
            gem install rubocop-ast:1.17.0 rubocop:1.28.2 rubocop-junit_formatter

      - task: Bash@3
        displayName: Run Rubocop linter on test code
        inputs:
          targetType: inline
          script: |
            rubocop ./tests \
            -c .rubocop.yml \
            --require rubocop/formatter/junit_formatter \
            --format RuboCop::Formatter::JUnitFormatter \
            --out rubocop_results.xml \
            --fail-level error

      - task: Bash@3
        displayName: Assert number of linter failures
        inputs:
          targetType: inline
          script: |
            set -e
            # Fetch number of detected failures from results file, then test if it does not exceed the declared threshold
            # rubocop_linter_threshold is set based on latest linter results performed after code cleaning
            detected_failures=$( \
              grep --only-matching 'failures=.[0-9]*.' rubocop_results.xml | \
              grep --only-matching '[0-9]*')
            echo "Number of detected failures: $detected_failures"
            echo "Failures threshold value: $(rubocop_linter_threshold)"
            test $detected_failures -le $(rubocop_linter_threshold)

      - task: PublishTestResults@2
        displayName: Publish Rubocop linting test results
        inputs:
          testResultsFiles: rubocop_results.xml
          searchFolder: $(System.DefaultWorkingDirectory)
          testRunTitle: Rubocop linting test results
