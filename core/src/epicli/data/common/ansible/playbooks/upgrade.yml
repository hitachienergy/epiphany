---
# Ansible playbook for upgrading common and K8s components

- hosts: all
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: common

- hosts: kubernetes_master
  become: true
  become_method: sudo
  pre_tasks:
    # Needed for tasks upgrade playbook borrows from kubernetes_master role.
    - import_role:
        name: kubernetes_common
        tasks_from: gather-facts
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"

    - include_role:
        name: upgrade
        tasks_from: kubernetes/gather-static-facts
      run_once: true
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: kubernetes_master:kubernetes_node
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: image-registry
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: kubernetes_master:kubernetes_node
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kubernetes
      vars: { ver: "1.17.7", cni_ver: "0.8.6", cni_in_kubelet: true, upgrade_to_final_version: false }
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: kubernetes_master:kubernetes_node
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kubernetes
      vars: { ver: "1.18.6", cni_ver: "0.8.6", upgrade_to_final_version: true }
      when: "'kubernetes' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.remote }}"

- hosts: elasticsearch_curator
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: elasticsearch-curator
      when: "'elasticsearch_curator' in upgrade_components or upgrade_components|length == 0"

- hosts: filebeat
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: filebeat
      when:
        - groups.logging is defined
        - "'filebeat' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.local }}"

# === logging ===

# Some pre-upgrade tasks can be run in parallel (what saves time) while others must be run in serial (to support rolling upgrades).
# Such a separation in Ansible can be applied only at play level thus we have two plays below.

# play 1/2: pre-upgrade parallel tasks
- hosts: logging
  become: true
  become_method: sudo
  tasks:
    - include_role:
        name: upgrade
        tasks_from: opendistro_for_elasticsearch-01
      when: "'logging' in upgrade_components or upgrade_components|length == 0"
  vars:
    current_group_name: logging

# play 2/2: serial tasks
- hosts: logging
  become: true
  become_method: sudo
  gather_facts: false  # gathered by previous play
  serial: 1
  tasks:
    - include_role:
        name: upgrade
        tasks_from: opendistro_for_elasticsearch-02
      when: "'logging' in upgrade_components or upgrade_components|length == 0"
  vars:
    current_group_name: logging

# === opendistro_for_elasticsearch ===

# Some pre-upgrade tasks can be run in parallel (what saves time) while others must be run in serial (to support rolling upgrades).
# Such a separation in Ansible can be applied only at play level thus we have two plays below.

# play 1/2: parallel tasks
- hosts: opendistro_for_elasticsearch
  become: true
  become_method: sudo
  tasks:
    - include_role:
        name: upgrade
        tasks_from: opendistro_for_elasticsearch-01
      when: "'opendistro_for_elasticsearch' in upgrade_components or upgrade_components|length == 0"
  vars:
    current_group_name: opendistro_for_elasticsearch

# play 2/2: serial tasks
- hosts: opendistro_for_elasticsearch
  become: true
  become_method: sudo
  gather_facts: false  # gathered by previous play
  serial: 1
  tasks:
    - include_role:
        name: upgrade
        tasks_from: opendistro_for_elasticsearch-02
      when: "'opendistro_for_elasticsearch' in upgrade_components or upgrade_components|length == 0"
  vars:
    current_group_name: opendistro_for_elasticsearch

- hosts: kibana
  become: true
  become_method: sudo
  serial: 1
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kibana
      when: "'kibana' in upgrade_components or upgrade_components|length == 0"

- hosts: grafana
  become: true
  become_method: sudo
  serial: 1
  tasks:
    - import_role:
        name: upgrade
        tasks_from: grafana
      when: "'grafana' in upgrade_components or upgrade_components|length == 0"

- hosts: zookeeper
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: zookeeper
      vars: { lock_file: /var/tmp/zookeeper-upgrade-in-progress.flag }
      when: "'zookeeper' in upgrade_components or upgrade_components|length == 0"

- hosts: kafka
  serial: 1
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: kafka
      vars: { lock_file: /var/tmp/kafka-upgrade-in-progress.flag }
      when: "'kafka' in upgrade_components or upgrade_components|length == 0"

- hosts: rabbitmq
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: rabbitmq
      vars: { lock_file: /var/tmp/rabbitmq-upgrade-in-progress.flag }
      when: "'rabbitmq' in upgrade_components or upgrade_components|length == 0"

- hosts: ignite
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: ignite
      when: "'ignite' in upgrade_components or upgrade_components|length == 0"

- hosts: haproxy
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: load_balancer
      when: "'load_balancer' in upgrade_components or upgrade_components|length == 0"

- hosts: node_exporter
  become: true
  become_method: sudo
  tasks:
    - import_role:
        name: upgrade
        tasks_from: node-exporter
      when: "'node_exporter' in upgrade_components or upgrade_components|length == 0"
  environment:
    KUBECONFIG: "{{ kubeconfig.local }}"

# === postgresql ===

- hosts: postgresql
  become: true
  become_method: sudo
  module_defaults:
    shell:
      executable: /bin/bash
  tasks:
    # step 1: upgrade repmgr
    - include_role:
        name: postgresql
        tasks_from: upgrade/extensions/replication/pg-old/repmgr-main
      when: "'postgresql' in upgrade_components or upgrade_components|length == 0"

    # step 2: upgrade postgresql
    - include_role:
        name: postgresql
        tasks_from: upgrade/main
      when: "'postgresql' in upgrade_components or upgrade_components|length == 0"
