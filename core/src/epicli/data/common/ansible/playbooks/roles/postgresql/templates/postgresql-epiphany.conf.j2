# {{ ansible_managed }}
# --------------------------------------------------
# Epiphany managed PostgreSQL configuration sub-file
# --------------------------------------------------

# This file is included by postgresql.conf to override settings.
# Only the last setting encountered for a parameter while the server is reading
# configuration files is used.

{% if _specification.config_file.parameter_groups is defined and _specification.config_file.parameter_groups %}
{%   for group in (_specification.config_file.parameter_groups) %}
#------------------------------------------------------------------------------
# {{ group.name | upper }}
#------------------------------------------------------------------------------
{%     for subgroup in group.subgroups %}

# - {{ subgroup.name }} -

{%       for parameter in subgroup.parameters if parameter.when is undefined
                                                 or (parameter.when
                                                     and _specification.extensions[parameter.when].enabled is defined
                                                     and _specification.extensions[parameter.when].enabled) %}
{#         use of 'parameter_value' is workaround since we don't have Jinja's {% do %} statement enabled (required to update dictionaries) #}
{%         set parameter_value = parameter.value %}
{%         if parameter.name == 'shared_preload_libraries' and parameter.value|lower == 'autoconfigured' %}
{%           set shared_preload_libraries = [] %}
{#           shared_preload_libraries from runtime, including those that were set outside Epiphany managed config #}
{%           if runtime_shared_preload_libraries is defined and runtime_shared_preload_libraries %}
{%             set shared_preload_libraries = runtime_shared_preload_libraries.split(',') %}
{%           endif %}
{#           shared_preload_libraries for extensions #}
{%           if _specification.extensions is defined and _specification.extensions %}
{%             set enabled_extensions_libraries = _specification.extensions | dict2items(key_name='name', value_name='config')
                                                        | map(attribute='config')
                                                        | selectattr('enabled')
                                                        | selectattr('shared_preload_libraries', 'defined')
                                                        | map(attribute='shared_preload_libraries')
                                                        | list | flatten %}
{%             set disabled_extensions_libraries = _specification.extensions | dict2items(key_name='name', value_name='config')
                                                        | map(attribute='config')
                                                        | rejectattr('enabled')
                                                        | selectattr('shared_preload_libraries', 'defined')
                                                        | map(attribute='shared_preload_libraries')
                                                        | list | flatten %}
{%             set shared_preload_libraries = (shared_preload_libraries | difference(disabled_extensions_libraries)) + enabled_extensions_libraries %}
{%           endif %}
{%           if shared_preload_libraries %}
{%             set parameter_value = "'" + shared_preload_libraries | unique | join(',') + "'" %}
{%           else %}
{%             set parameter_value = "''" %}
{%           endif %}
{%         endif %}
{#         BEGIN convert booleans to postgres style strings #}
{%         if parameter_value is sameas true %}
{%           set parameter_value = 'on' %}
{%         elif parameter_value is sameas false %}
{%           set parameter_value = 'off' %}
{%         endif %}
{#         END #}
{%         if parameter.comment is defined and parameter.comment %}
{{ parameter.name }} = {{ parameter_value }}	# {{ parameter.comment }}
{%         else %}
{{ parameter.name }} = {{ parameter_value }}
{%         endif %}
{%       endfor %}
{%     endfor %}
{%     if not loop.last %}

{%     endif %}
{%   endfor %}
{% endif %}

{% if _specification.extensions is defined and _specification.extensions
      and (_specification.extensions | dict2items(key_name='name', value_name='config')
                                    | map(attribute='config')
                                    | selectattr('config_file_parameters', 'defined') | selectattr('enabled') | list | length) %}
#------------------------------------------------------------------------------
# EXTENSIONS
#------------------------------------------------------------------------------
# Note: Settings for extensions have higher priority by purpose and override
# previous values.
{%   for extension, config in _specification.extensions.items() %}
{%     if config.config_file_parameters is defined and config.config_file_parameters and config.enabled is sameas true %}

# - Extension: {{ extension }} -

{%       for parameter, value in config.config_file_parameters.items() %}
{#         convert booleans to postgres style strings #}
{%         if value is sameas true %}
{%           set value = 'on' %}
{%         elif value is sameas false %}
{%           set value = 'off' %}
{%         endif %}
{{ parameter }} = {{ value }}
{%       endfor %}
{%     endif %}
{%   endfor %}
{% endif %}
