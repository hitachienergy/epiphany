---
# This file contains flow that cannot be run in parallel on multiple hosts because of rolling upgrades.
# It's run after upgrade-elasticsearch-01.yml so some facts are already set.

# Run migration procedure - the second (serial) part
- include_tasks: opendistro_for_elasticsearch/migrate-from-demo-certs-02.yml
  when:
    - es_api.cert_type == 'demo'
    - es_clustered  # rolling upgrade only for clustered installation

- name: ODFE | Print API facts
  debug:
    var: es_api
  tags: [ never, debug ]  # only runs when debug or never tag requested

- name: ODFE | Prepare cluster for rolling upgrade
  include_tasks: opendistro_for_elasticsearch/utils/prepare-cluster-for-node-restart.yml
  when: es_clustered

- name: ODFE | Stop elasticsearch service
  systemd:
    name: elasticsearch
    state: stopped

- name: ODFE | Include Elasticsearch installation tasks
  include_role:
    name: opendistro_for_elasticsearch
    tasks_from: install-es.yml

- name: ODFE | Include Elasticsearch configuration tasks
  include_role:
    name: opendistro_for_elasticsearch
    tasks_from: configure-es.yml
  vars:
    _old: "{{ existing_config.main }}"
    # Keep the same data structure as for apply mode
    specification:
      jvm_options:  "{{ existing_config.jvm_options }}"
      cluster_name: "{{ _old['cluster.name'] }}"
      clustered: "{{ 'True' if _old['discovery.seed_hosts'] | length > 1 else 'False' }}"
      paths:
        data: "{{ _old['path.data'] }}"
        repo: "{{ _old['path.repo'] | default('/var/lib/elasticsearch-snapshots') }}"  # absent in Epiphany v0.6 thus we use default
        logs: "{{ _old['path.logs'] }}"
      opendistro_security:
        ssl:
          transport:
            enforce_hostname_verification: "{{ _old['opendistro_security.ssl.transport.enforce_hostname_verification'] }}"

    _demo_DNs:
      admin: "{{ opendistro_for_elasticsearch.certs_migration.demo_DNs.admin }}"
      node:  "{{ opendistro_for_elasticsearch.certs_migration.demo_DNs.node }}"
    _dual_root_ca_filename: "{{ opendistro_for_elasticsearch.certs_migration.dual_root_ca.filename }}"
    _epiphany_root_ca_filename: "{{ certificates.files.root_ca.cert.filename }}"
    _updated_existing_config:
      opendistro_security.authcz.admin_dn: "{{ _old['opendistro_security.authcz.admin_dn'] | reject('search', _demo_DNs.admin) }}"
      opendistro_security.nodes_dn: "{{ _old['opendistro_security.nodes_dn'] | default([]) | reject('search', _demo_DNs.node) }}"
      opendistro_security.ssl.http.pemtrustedcas_filepath: >-
        {{ _old['opendistro_security.ssl.http.pemtrustedcas_filepath']      | replace(_dual_root_ca_filename, _epiphany_root_ca_filename) }}
      opendistro_security.ssl.transport.pemtrustedcas_filepath: >-
        {{ _old['opendistro_security.ssl.transport.pemtrustedcas_filepath'] | replace(_dual_root_ca_filename, _epiphany_root_ca_filename) }}

      http.port:      "{{ _old['http.port']      | default(ports.http) }}"
      transport.port: "{{ _old['transport.port'] | default(ports.transport) }}"

    existing_es_config: "{{ _old | combine(_updated_existing_config) }}"

- name: ODFE | Include upgrade plugins tasks
  include_tasks: opendistro_for_elasticsearch/upgrade-plugins.yml

# Restart elasticsearch service (unconditionally to ensure this task is not skipped in case of rerunning after interruption)
- include_tasks: opendistro_for_elasticsearch/utils/restart-node.yml
  vars:
    daemon_reload: true # opendistro-performance-analyzer provides opendistro-performance-analyzer.service
    target_inventory_hostname: "{{ inventory_hostname }}"

# Post-upgrade tasks

- name: Re-enable shard allocation
  when: es_clustered
  block:
    - include_tasks: opendistro_for_elasticsearch/utils/enable-shard-allocation.yml

    - include_tasks: opendistro_for_elasticsearch/utils/wait-for-shard-allocation.yml

# Read cluster health status from before the upgrade
- name: Load upgrade state file
  slurp:
    src: "{{ opendistro_for_elasticsearch.upgrade_state_file_path }}"
  register: slurp_upgrade_state_file

# Verify cluster status
- include_tasks: opendistro_for_elasticsearch/utils/wait-for-cluster-status.yml
  when: not es_clustered or
        (es_clustered and inventory_hostname == ansible_play_hosts_all[-1])  # for 'green' status at least 2 nodes must be already upgraded
  vars:
    initial_status: "{{ (slurp_upgrade_state_file.content | b64decode | from_json)['status'] }}"
    expected_status: "{{ [ initial_status, 'green'] | unique }}"

- name: ODFE | Remove dual root CA temporary file
  file:
    path: "{{ (certificates.dirs.certs, opendistro_for_elasticsearch.certs_migration.dual_root_ca.filename) | path_join }}"
    state: absent
  when: es_api.cert_type == 'Epiphany'

- name: ODFE | Remove upgrade state file
  file:
    path: "{{ opendistro_for_elasticsearch.upgrade_state_file_path }}"
    state: absent
