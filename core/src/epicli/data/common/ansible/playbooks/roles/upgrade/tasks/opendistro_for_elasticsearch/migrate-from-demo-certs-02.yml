---
# =================================================================================================
# Migration from demo certs to generated by Epiphany
# -------------------------------------------------------------------------------------------------
# A) Parallel part (all nodes at the same time) - tasks from migrate-from-demo-certs-01.yml
# B) Serial part (node by node) - THIS FILE
#    1. Prepare cluster for a node restart (disable shard allocation)
#    2. Restart all nodes one by one waiting for yellow cluster status after each restart
#    3. Patch elasticsearch.yml to use Epiphany node cert instead of demo (all nodes)
#    4. Restart all nodes one by one waiting for yellow cluster status after each restart
#    5. Re-enable shard allocation
#    6. Wait for green/yellow cluster status
#    7. Test API access using Epiphany admin cert (all nodes)
#    8. Update API related facts to use Epiphany admin cert instead of demo
#    9. Reload config file

- when: inventory_hostname == ansible_play_hosts_all[0]  # run once
  block:
    # Prepare cluster for a node restart
    - include_tasks: utils/prepare-cluster-for-node-restart.yml

    # Restart all nodes (special flow: run once but in loop for each host)
    - include_tasks:
        file: utils/restart-node.yml
        apply:
          delegate_to: "{{ target_inventory_hostname }}"
          delegate_facts: true
      loop: "{{ ansible_play_hosts_all }}"
      loop_control:
        loop_var: target_inventory_hostname
      vars:
        expected_status: [ yellow, green ]  # 'green' may not be possible until shard allocation is re-enabled

    # Patch elasticsearch.yml to use Epiphany node cert (all hosts)

    - name: ODFE | Load /etc/elasticsearch/elasticsearch.yml
      slurp:
        src: /etc/elasticsearch/elasticsearch.yml
      register: _elasticsearch_yml
      delegate_to: "{{ target_inventory_hostname }}"
      loop: "{{ ansible_play_hosts_all }}"
      loop_control:
        loop_var: target_inventory_hostname

    - name: OFDE | Patch /etc/elasticsearch/elasticsearch.yml (switch to Epiphany node certificates)
      copy:
        dest: /etc/elasticsearch/elasticsearch.yml
        content: "{{ _patched_content | to_nice_yaml }}"
        mode: u=rw,g=rw,o=
        owner: root
        group: elasticsearch
        backup: true
      delegate_to: "{{ target_inventory_hostname }}"
      delegate_facts: true
      loop: "{{ ansible_play_hosts_all }}"
      loop_control:
        index_var: loop_index0
        loop_var: target_inventory_hostname
      vars:
        _node_hostname: "{{ hostvars[target_inventory_hostname].ansible_nodename }}"
        _epiphany_node_cert:
          cert_filename: "{{ certificates.files.node.cert.filename | replace(ansible_nodename, _node_hostname) }}"
          key_filename:  "{{ certificates.files.node.key.filename  | replace(ansible_nodename, _node_hostname) }}"
        _old_content: >-
          {{ _elasticsearch_yml.results[loop_index0].content | b64decode | from_yaml }}
        _updated_settings:
          opendistro_security.ssl.http.pemcert_filepath: "{{ _epiphany_node_cert.cert_filename }}"
          opendistro_security.ssl.http.pemkey_filepath:  "{{ _epiphany_node_cert.key_filename }}"
          opendistro_security.ssl.transport.pemcert_filepath: "{{ _epiphany_node_cert.cert_filename }}"
          opendistro_security.ssl.transport.pemkey_filepath:  "{{ _epiphany_node_cert.key_filename }}"
        _patched_content: >-
          {{ _old_content | combine(_updated_settings) }}

    # Restart all nodes (special flow: run once but in loop for each host)
    - include_tasks:
        file: utils/restart-node.yml
        apply:
          delegate_to: "{{ target_inventory_hostname }}"
          delegate_facts: true
      loop: "{{ ansible_play_hosts_all }}"
      loop_control:
        loop_var: target_inventory_hostname
      vars:
        expected_status: [ yellow, green ]  # 'green' may not be possible until shard allocation is re-enabled

    # Re-enable shard allocation
    - include_tasks: utils/enable-shard-allocation.yml

    # Wait for green/yellow cluster status
    - include_tasks: utils/wait-for-cluster-status.yml
      vars:
        expected_status: [ yellow, green ]  # for 'green' all nodes must be already upgraded

    # Test API access using Epiphany admin cert (all nodes)
    - include_tasks:
        file: utils/assert-api-access.yml
        apply:
          delegate_to: "{{ target_inventory_hostname }}"
          delegate_facts: true
      loop: "{{ ansible_play_hosts_all }}"
      loop_control:
        loop_var: target_inventory_hostname
      vars:
        es_api:
          cert_type: Epiphany
          cert_path: &epi_cert_path "{{ (certificates.dirs.certs, certificates.files.admin.cert.filename) | path_join }}"
          key_path:  &epi_key_path  "{{ (certificates.dirs.certs, certificates.files.admin.key.filename)  | path_join }}"
          url: "{{ hostvars[target_inventory_hostname].es_api.url }}"
        fail_msg: API access test failed.

- name: Update API related facts to use Epiphany admin certificate instead of demo
  set_fact:
    es_api: "{{ es_api | combine(_es_api) }}"
  vars:
    _es_api:
      cert_type: Epiphany
      cert_path: *epi_cert_path
      key_path:  *epi_key_path

# Reload config file to preserve patched settings (sets 'existing_config' fact)
- include_tasks: utils/get-config-from-files.yml
