---
# This file is meant to be also used by upgrade role

- name: Create directory for CA private key
  file:
    state: directory
    path: "{{ certificates.dirs.ca_key }}"
    owner: root
    group: elasticsearch
    mode: u=rwx,g=rx,o=  # elasticsearch.service requires 'rx' for group

# csr files are kept only for idempotency
- name: Create directory for CSR files
  file:
    state: directory
    path: "{{ certificates.dirs.csr }}"
    owner: root
    group: elasticsearch
    mode: u=rwx,g=rx,o=  # CSR file doesn't contain private key

- name: Generate keys and certificates on first node
  when: inventory_hostname == ansible_play_hosts_all[0]
  vars:
    return_content: "{{ true if (ansible_play_hosts_all | count > 1) else false }}"  # to copy it to other nodes
  module_defaults:
    community.crypto.openssl_privatekey:
      size: 2048  # based on ODFE docs
      type: RSA
      mode: u=rw,go=
      owner: root
      group: elasticsearch
      format: pkcs8
    community.crypto.openssl_csr:
      mode: u=rw,g=r,o=
      owner: root
      group: elasticsearch
      use_common_name_for_san: false
    community.crypto.x509_certificate:
      selfsigned_digest: sha256
      ownca_digest: sha256
      mode: u=rw,g=r,o=
      owner: root
      group: elasticsearch
  block:
    # --- Generate CA root certificate ---

    - name: Generate private key for root CA
      community.crypto.openssl_privatekey:
        path: "{{ certificates.dirs.ca_key }}/{{ certificates.files.root_ca.key.filename }}"
        return_content: "{{ return_content }}"
      no_log: true
      register: ca_key

    - name: Generate CSR for root CA  # based on ODFE demo cert (root-ca.pem)
      community.crypto.openssl_csr:
        path: "{{ certificates.dirs.csr }}/{{ certificates.files.root_ca.cert.filename | regex_replace('\\..+$', '.csr') }}"
        privatekey_path: "{{ ca_key.filename }}"  # 'filename' contains full path
        CN: "{{ certificates.files.root_ca.cert.subject.CN }}"
        OU: "{{ certificates.files.root_ca.cert.subject.OU }}"
        O: "{{ certificates.files.root_ca.cert.subject.O }}"
        basic_constraints:
          - CA:TRUE
        basic_constraints_critical: true
        key_usage:
          - Digital Signature
          - Certificate Sign
          - CRL Sign
        key_usage_critical: true
      register: ca_csr

    - name: Generate CA root certificate
      community.crypto.x509_certificate:
        path: "{{ certificates.dirs.certs }}/{{ certificates.files.root_ca.cert.filename }}"
        csr_path: "{{ ca_csr.filename }}"
        privatekey_path: "{{ ca_key.filename }}"
        provider: selfsigned
        selfsigned_not_after: "{{ certificates.files.root_ca.cert.selfsigned_not_after }}"
        return_content: "{{ return_content }}"
      register: ca_crt

    # --- Generate admin certificate ---

    - name: Generate private key for admin certificate
      community.crypto.openssl_privatekey:
        path: "{{ certificates.dirs.certs }}/{{ certificates.files.admin.key.filename }}"
        format: pkcs8  # specified explicitly since this format is required
        return_content: "{{ return_content }}"
      no_log: true
      register: admin_key

    - name: Generate CSR for admin certificate  # based on ODFE demo cert (kirk.pem)
      community.crypto.openssl_csr:
        path: "{{ certificates.dirs.csr }}/{{ certificates.files.admin.cert.filename | regex_replace('\\..+$', '.csr') }}"
        privatekey_path: "{{ admin_key.filename }}"  # 'filename' contains full path
        CN: "{{ certificates.files.admin.cert.subject.CN }}"
        OU: "{{ certificates.files.admin.cert.subject.OU }}"
        O: "{{ certificates.files.admin.cert.subject.O }}"
        basic_constraints:
          - CA:FALSE
        basic_constraints_critical: true
        key_usage:
          - Digital Signature
          - Non Repudiation
          - Key Encipherment
        key_usage_critical: true
        extended_key_usage:
          - TLS Web Client Authentication
        extended_key_usage_critical: true
      register: admin_csr

    - name: Generate admin certificate
      community.crypto.x509_certificate:
        path: "{{ certificates.dirs.certs }}/{{ certificates.files.admin.cert.filename }}"
        csr_path: "{{ admin_csr.filename }}"
        provider: ownca
        ownca_path: "{{ ca_crt.filename }}"
        ownca_privatekey_path: "{{ ca_key.filename }}"
        ownca_not_after: "{{ certificates.files.admin.cert.ownca_not_after }}"
        return_content: "{{ return_content }}"
      register: admin_crt

- name: Copy common files to other hosts
  when:
    - ansible_play_hosts_all | count > 1
    - inventory_hostname in ansible_play_hosts_all[1:]
  module_defaults:
    copy:
      owner: root
      group: elasticsearch
  block:
    - name: Copy CA private key to other hosts
      copy:
        content: "{{ _key.privatekey }}"
        dest: "{{ _key.filename }}"
        mode: u=rw,go=
      no_log: true
      vars:
        _key: "{{ hostvars[ansible_play_hosts_all[0]].ca_key }}"

    - name: Copy root CA to other hosts
      copy:
        content: "{{ _crt.certificate }}"
        dest: "{{ _crt.filename }}"
        mode: u=rw,g=r,o=
      vars:
        _crt: "{{ hostvars[ansible_play_hosts_all[0]].ca_crt }}"

    - name: Copy admin private key to other hosts
      copy:
        content: "{{ _key.privatekey }}"
        dest: "{{ _key.filename }}"
        mode: u=rw,go=
      no_log: true
      vars:
        _key: "{{ hostvars[ansible_play_hosts_all[0]].admin_key }}"

    - name: Copy admin certificate to other hosts
      copy:
        content: "{{ _crt.certificate }}"
        dest: "{{ _crt.filename }}"
        mode: u=rw,g=r,o=
      vars:
        _crt: "{{ hostvars[ansible_play_hosts_all[0]].admin_crt }}"

# --- Generate node certificate (each node has its own) ---

- name: Generate private key for node certificate
  community.crypto.openssl_privatekey:
    path: "{{ certificates.dirs.certs }}/{{ certificates.files.node.key.filename }}"
    format: pkcs8
    size: 2048
    type: RSA
    mode: u=rw,g=r,o=  # elasticsearch.service requires 'r' for group
    owner: root
    group: elasticsearch
    return_content: false
  no_log: true
  register: node_key

- name: Generate CSR for node certificate  # based on ODFE demo cert (esnode.pem)
  community.crypto.openssl_csr:
    path: "{{ certificates.dirs.csr }}/{{ certificates.files.node.cert.filename | regex_replace('\\..+$', '.csr') }}"
    privatekey_path: "{{ node_key.filename }}"  # 'filename' contains full path
    CN: "{{ certificates.files.node.cert.subject.CN }}"
    OU: "{{ certificates.files.node.cert.subject.OU }}"
    O: "{{ certificates.files.node.cert.subject.O }}"
    basic_constraints:
      - CA:FALSE
    basic_constraints_critical: true
    key_usage:
      - Digital Signature
      - Non Repudiation
      - Key Encipherment
    key_usage_critical: true
    extended_key_usage:
      - TLS Web Server Authentication
      - TLS Web Client Authentication
    extended_key_usage_critical: true
    subjectAltName: "{{ _dns_list + [ 'IP:' + ansible_default_ipv4.address ] }}"
    use_common_name_for_san: false
    mode: u=rw,g=r,o=
    owner: root
    group: elasticsearch
  register: node_csr
  vars:
    _unique_hostnames: "{{ [ansible_hostname, ansible_nodename, ansible_fqdn] | unique }}"
    _dns_list: >-
      {{ ['DNS'] | zip_longest(_unique_hostnames, fillvalue='DNS') | map('join', ':') }}

- name: Generate node certificate
  community.crypto.x509_certificate:
    path: "{{ certificates.dirs.certs }}/{{ certificates.files.node.cert.filename }}"
    csr_path: "{{ node_csr.filename }}"
    provider: ownca
    ownca_path: "{{ hostvars[ansible_play_hosts_all[0]].ca_crt.filename }}"
    ownca_privatekey_path: "{{ hostvars[ansible_play_hosts_all[0]].ca_key.filename }}"
    ownca_not_after: "{{ certificates.files.node.cert.ownca_not_after }}"
    ownca_digest: sha256
    mode: u=rw,go=r
    owner: root
    group: elasticsearch
  register: node_crt
