---
# This file contains only pre-upgrade tasks that can be run in parallel on all hosts

- name: ODFE | Create upgrade state file
  become: true
  file:
    path: "{{ opendistro_for_elasticsearch.upgrade_state_file_path }}"
    state: touch
    mode: u=rw,g=r,o=

- name: ODFE | Ensure elasticsearch service is running
  systemd:
    name: elasticsearch
    enabled: yes
    state: started
  register: elasticsearch_state

# Sets 'existing_config' fact
- include_tasks: utils/get-config-from-files.yml

- name: ODFE | Set common facts
  set_fact:
    es_host:           "{{ existing_config.main['network.host']   | default('_local_') }}"
    es_http_port:      "{{ existing_config.main['http.port']      | default(ports.http) }}"
    es_transport_port: "{{ existing_config.main['transport.port'] | default(ports.transport) }}"
    es_clustered:      "{{ (existing_config.main['discovery.seed_hosts'] | length > 1) | ternary(True, False) }}"

- name: ODFE | Wait for elasticsearch service to start up
  wait_for:
    port: "{{ es_transport_port }}"
    host: "{{ es_host if (es_host is not regex('^_.+_$')) else '0.0.0.0' }}"  # 0.0.0.0 means any IP
  when: elasticsearch_state.changed

# This block requires elasticsearch service to be running
- name: Get host address when special value is used  # e.g. '_site_'
  when: es_host is regex('^_.+_$')
  block:
    - name: Gather facts on listening ports
      community.general.listen_ports_facts:

    - name: Get host address based on transport port
      set_fact:
        es_host: "{{ ansible_facts.tcp_listen | selectattr('port', '==', es_transport_port|int)
                                              | map(attribute='address') | reject('match', '::') | first }}"

# NOTE: We need admin certificate for passwordless administrative access to REST API (since we don't know admin's password)

- include_role:
    name: certificate
    tasks_from: install-packages  # requirements for Ansible certificate modules

- name: ODFE | Get information on root-ca certificate
  community.crypto.x509_certificate_info:
    # 'pemtrustedcas_filepath' is a relative path
    path: "{{ ('/etc/elasticsearch', existing_config.main['opendistro_security.ssl.transport.pemtrustedcas_filepath']) | path_join }}"
  register: _root_ca_info

- name: ODFE | Check if demo or Epiphany certificates are in use  # self-signed
  set_fact:
    _is_demo_cert_in_use:     "{{ 'True' if _root_ca_info.subject.commonName == 'Example Com Inc. Root CA'      else 'False' }}"
    _is_epiphany_cert_in_use: "{{ 'True' if _root_ca_info.subject.commonName == 'Epiphany Managed ODFE Root CA' else 'False' }}"

# For custom admin cert (non-demo and non-Epiphany), we use workaround (upgrade_config.custom_admin_certificate).
# The workaround should be replaced after implementing task #2127.
- name: ODFE | Set API access facts
  set_fact:
    es_api:
      cert_path: "{{ _cert_path[_cert_type] }}"
      cert_type: "{{ _cert_type }}"
      key_path:  "{{ _key_path[_cert_type] }}"
      url: https://{{ es_host }}:{{ es_http_port }}
  vars:
    _cert_type: >-
      {{ 'demo'     if (_is_demo_cert_in_use)     else
         'Epiphany' if (_is_epiphany_cert_in_use) else
         'custom' }}
    _cert_path:
      custom:   "{{ lookup('vars', current_group_name).upgrade_config.custom_admin_certificate.cert_path }}"  # defaults are not available via hostvars
      demo:     "{{ (certificates.dirs.certs, certificates.files.demo.admin.cert)     | path_join }}"
      Epiphany: "{{ (certificates.dirs.certs, certificates.files.admin.cert.filename) | path_join }}"
    _key_path:
      custom:   "{{ lookup('vars', current_group_name).upgrade_config.custom_admin_certificate.key_path }}"
      demo:     "{{ (certificates.dirs.certs, certificates.files.demo.admin.key)     | path_join }}"
      Epiphany: "{{ (certificates.dirs.certs, certificates.files.admin.key.filename) | path_join }}"

- include_tasks: utils/assert-cert-files-exist.yml

# =================================================================================================
# FLOW
# -------------------------------------------------------------------------------------------------
# NOTE: For clustered nodes it's recommended to disable shard allocation for the cluster before restarting a node (https://www.elastic.co/guide/en/elasticsearch/reference/current/restart-cluster.html#restart-cluster-rolling)
#
# if cert_type == 'demo':
#     Test API access
#     Genereate Epiphany self-signed certs
#     Run certificates migration procedure for all nodes when 'es_clustered is true'
#     // Subtasks of the migration procedure:
#         Test API access
#         Update API related facts to use Epiphany admin certificate instead of demo
# if cert_type == 'Epiphany':
#     Genereate Epiphany self-signed certs - to re-new certs if expiration date differs
#     Test API access
# if cert_type == 'custom':
#     Test API access
# Run upgrade (removes known demo certificate files)
# if cert_type == 'Epiphany':
#     Remove dual root CA file (created as part of the migration, needed until all nodes are upgraded)
# =================================================================================================

# Test API access (demo or custom certs)
- include_tasks: utils/assert-api-access.yml
  when: es_api.cert_type in ['demo', 'custom']
  vars:
    _fail_msg:
      common: Test of accessing API with TLS authentication failed.
      custom: >-
        It looks like you use custom certificates.
        Please refer to 'Open Distro for Elasticsearch upgrade' section of How-To docs.
      demo: >-
        It looks like you use demo certificates but your configuration might be incorrect or unsupported.
    fail_msg: "{{ _fail_msg.common }} {{ _fail_msg[es_api.cert_type] }}"

- name: Generate self-signed certificates
  include_role:
    name: opendistro_for_elasticsearch
    tasks_from: generate-certs
  when: es_api.cert_type != 'custom'

# Test API access (Epiphany certs)
- include_tasks: utils/assert-api-access.yml
  when: es_api.cert_type == 'Epiphany'
  vars:
    fail_msg: >-
      Test of accessing API with TLS authentication failed.
      It looks like you use certificates generated by Epiphany but your configuration might be incorrect or an unexpected error occurred.

# Run migration procedure - the first (parallel) part for clustered installation
- include_tasks: migrate-from-demo-certs-01.yml
  when:
    - es_api.cert_type == 'demo'
    - es_clustered  # rolling upgrade only for clustered installation

# Run migration procedure for non-clustered installation
- include_tasks: migrate-from-demo-certs-non-clustered.yml
  when:
    - es_api.cert_type == 'demo'
    - not es_clustered

# Next tasks are run in serial mode in the next play
