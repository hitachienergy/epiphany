---
- name: repmgr for PG {{ pg_version }} | Load default variables for upgrade
  include_vars:
    file: defaults/upgrade.yml
    name: upgrade_defaults

- name: repmgr for PG {{ pg_version }} | Get information about installed packages as facts
  package_facts:
    manager: auto
  when: ansible_facts.packages is undefined

- name: Run upgrade if needed
  when: ansible_facts.packages[repmgr_package_name] is defined
  vars:
    repmgr_package_name: "{{ upgrade_defaults.repmgr.package_name[ansible_os_family] }}"
    installed_version: "{{ ansible_facts.packages[repmgr_package_name][0].version }}"
    target_version: "{{ repmgr.version[ansible_os_family] }}"
  block:
    - name: repmgr for PG {{ pg_version }} | Print repmgr versions
      debug:
        msg:
          - "Installed version: {{ installed_version }}"
          - "Target version: {{ target_version }}"

    # If state file exists it means the previous run failed
    - name: repmgr for PG {{ pg_version }} | Check if upgrade state file exists
      stat:
        path: "{{ upgrade_defaults.repmgr.upgrade.state_file_path }}"
        get_attributes: false
        get_checksum: false
        get_mime: false
      register: stat_upgrade_state_file

    - name: repmgr for PG {{ pg_version }} | Upgrade repmgr
      include_tasks: roles/postgresql/tasks/upgrade/extensions/replication/repmgr-upgrade.yml
      when: target_version is version(installed_version, '>')
         or stat_upgrade_state_file.stat.exists
