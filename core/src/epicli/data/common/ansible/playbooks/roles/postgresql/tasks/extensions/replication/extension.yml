---
- name: Extensions | Repmgr | RedHat | Create repmgr symlink
  file:
    src: "{{ repmgr.bin_dir.RedHat }}/repmgr"
    dest: "/usr/bin/repmgr"
    state: link
  when: ansible_os_family == 'RedHat'

# --- Configure users ---

- name: Extensions | Repmgr | Add postgres user to sudoers file
  lineinfile:
    path: /etc/sudoers
    line: >-
      postgres ALL=(ALL:ALL) NOPASSWD:
      /bin/systemctl start {{ pg.service_name[ansible_os_family] }},
      /bin/systemctl stop {{ pg.service_name[ansible_os_family] }},
      /bin/systemctl restart {{ pg.service_name[ansible_os_family] }},
      /bin/systemctl reload {{ pg.service_name[ansible_os_family] }},
      {{ repmgr.bin_dir[ansible_os_family] }}/repmgr standby follow
    validate: 'visudo -cf %s'

- name: Extensions | Repmgr | Create super user in postgresql
  become_user: postgres
  postgresql_user:
    user: "{{ specification.extensions.replication.privileged_user_name }}"
    password: "{{ specification.extensions.replication.privileged_user_password }}"
    role_attr_flags: LOGIN,SUPERUSER

- name: Extensions | Repmgr | Create replication user in postgresql
  become_user: postgres
  postgresql_user:
    user: "{{ specification.extensions.replication.replication_user_name }}"
    password: "{{ specification.extensions.replication.replication_user_password }}"
    role_attr_flags: LOGIN,REPLICATION

- name: Extensions | Repmgr | Create pgpass file
  template:
    src: pgpass-repmgr.j2
    dest: "{{ pg.base_dir[ansible_os_family] }}/.pgpass"
    owner: postgres
    group: postgres
    mode: u=rw,g=,o=

- name: Extensions | Repmgr | Add replication user to pg_hba.conf
  lineinfile:
    path: "{{ pg.config_dir[ansible_os_family] }}/pg_hba.conf"
    line: "host    replication     {{ specification.extensions.replication.replication_user_name }}      0.0.0.0/0               md5"
  register: modify_pg_hba_conf

- name: Extensions | Repmgr | Restart postgresql service
  systemd:
    name: "{{ pg.service_name[ansible_os_family] }}"
    state: restarted
  when: modify_pg_hba_conf.changed

  # --- Configure repmgr ---

- name: Extensions | Repmgr | Create database for repmgr
  become_user: postgres
  postgresql_db:
    name: "{{ specification.extensions.replication.repmgr_database }}"
    owner: "{{ specification.extensions.replication.replication_user_name }}"

- name: Extensions | Repmgr | Create repmgr config file
  template:
    src: repmgr.conf.j2
    dest: "{{ repmgr.config_dir[ansible_os_family] }}/repmgr.conf"
    owner: postgres
    group: postgres
    mode: u=rw,g=,o=
  register: template_repmgr_conf
  vars:
    node_id: "{{ (groups.postgresql.index(inventory_hostname) + 1) }}"
    pg_bin_dir: "{{ pg.bin_dir[ansible_os_family] }}"
    pg_data_dir: "{{ pg.data_dir[ansible_os_family] }}"
    pg_service_name: "{{ pg.service_name[ansible_os_family] }}"
    repmgr_service_name: "{{ repmgr.service_name[ansible_os_family] }}"

# On Ubuntu config file location is not set by package (see https://repmgr.org/docs/4.0/packages-debian-ubuntu.html).
# Create symlink to allow using repmgr commands without specifying config file location (which is custom).
# See https://repmgr.org/docs/4.0/configuration-file.html
- name: Extensions | Repmgr | Debian specific tasks
  when: ansible_os_family == 'Debian'
  block:
    - name: Extensions | Repmgr | Create symlink /etc/repmgr.conf
      file:
        src: "{{ template_repmgr_conf.dest }}"
        dest: /etc/repmgr.conf
        state: link
        owner: postgres
        group: postgres
      when: template_repmgr_conf.dest != '/etc/repmgr.conf'

    # For repmgr installed from Ubuntu package additional configuration is required before repmgrd is started as daemon
    - name: Extensions | Repmgr | Set repmgr.conf file in /etc/default/repmgrd
      replace:
        path: /etc/default/repmgrd
        regexp: "^#REPMGRD_CONF=\"/path/to/repmgr.conf\""
        replace: "REPMGRD_CONF=\"{{ repmgr.config_dir[ansible_os_family] }}/repmgr.conf\""

    - name: Extensions | Repmgr | Enable repmgrd in /etc/default/repmgrd
      replace:
        path: /etc/default/repmgrd
        regexp: "^[#]?REPMGRD_ENABLED=no"
        replace: "REPMGRD_ENABLED=yes"

# --- Configure primary node ---

- name: Extensions | Repmgr | Tasks to run only on primary node
  when: groups.postgresql[0] == inventory_hostname
  block:
    - name: Extensions | Repmgr | Check if primary node is already registered in repmgr cluster
      become_user: postgres
      shell: >-
        set -o pipefail &&
        {{ repmgr.bin_dir[ansible_os_family] }}/repmgr cluster show | grep -iw {{ inventory_hostname }} | grep -vw standby
      changed_when: false
      register: is_primary_already_registered
      failed_when: is_primary_already_registered.rc not in [0, 1]

    - name: Extensions | Repmgr | Register primary node
      when: is_primary_already_registered.stdout == ""
      block:
        - name: Register primary node
          become_user: postgres
          command: >-
            {{ repmgr.bin_dir[ansible_os_family] }}/repmgr primary register
            --superuser={{ specification.extensions.replication.privileged_user_name }} --force

        - name: Extensions | Repmgr | Restart repmgrd service
          service:
            name: "{{ repmgr.service_name[ansible_os_family] }}"
            state: restarted

# --- Configure standby node ---

- name: Extensions | Repmgr | Tasks to run only on standby node
  when: groups.postgresql[1] == inventory_hostname
  block:
    - name: Extensions | Repmgr | Check if node is already registered in repmgr cluster
      become_user: postgres
      shell: >-
        set -o pipefail &&
        {{ repmgr.bin_dir[ansible_os_family] }}/repmgr cluster show | grep -iw {{ inventory_hostname }}
      changed_when: false
      register: is_node_already_registered
      failed_when: is_node_already_registered.rc not in [0, 1]

    - name: Extensions | Repmgr | Clone node from primary and register
      when: is_node_already_registered.stdout == ""
      block:
        # Ubuntu specific: there are two systemd unit files: postgresql.service (service for managing all clusters
        # on system) and postgresql@.service (service template for clusters). The latter is 'PartOf' the former.
        # Ansible seems to not wait for dependent service to be stopped so we need to stop both to avoid error
        # from 'repmgr standby clone'.
        - name: Extensions | Repmgr | Stop postgresql service
          systemd:
            name: "{{ item }}"
            state: stopped
          vars:
            _services:
              Debian:
                - "{{ pg.service_name['Debian'] }}"
                - "{{ pg.instantiated_service_name['Debian'] }}"
              RedHat:
                - "{{ pg.service_name['RedHat'] }}"
          loop: "{{ _services[ansible_os_family] }}"

        - name: Extensions | Repmgr | Clone node with repmgr
          become_user: postgres
          command: >-
            {{ repmgr.bin_dir[ansible_os_family] }}/repmgr standby clone
            -h {{ hostvars[groups.postgresql[0]].ansible_default_ipv4.address }}
            -U {{ specification.extensions.replication.privileged_user_name }}
            -d {{ specification.extensions.replication.repmgr_database }} -p 5432 --force

        - name: Extensions | Repmgr | Start postgresql service
          systemd:
            name: "{{ pg.service_name[ansible_os_family] }}"
            state: started

        - name: Extensions | Repmgr | Register node with repmgr
          become_user: postgres
          command: >-
            {{ repmgr.bin_dir[ansible_os_family] }}/repmgr standby register --force
              -f  {{ repmgr.config_dir[ansible_os_family] }}/repmgr.conf
              --upstream-conninfo='host={{ hostvars[groups['postgresql'][0]]['ansible_default_ipv4']['address'] }},
                user={{ specification.extensions.replication.replication_user_name }},
                dbname={{ specification.extensions.replication.repmgr_database }},
                connect_timeout=2'
              --upstream-node-id 1

        - name: Extensions | Repmgr | Restart repmgrd service
          systemd:
            name: "{{ repmgr.service_name[ansible_os_family] }}"
            state: restarted

    - name: Extensions | Repmgr | Check if node is not attached to repmgr
      become_user: postgres
      shell: >-
        set -o pipefail &&
        {{ repmgr.bin_dir[ansible_os_family] }}/repmgr cluster show | grep -i 'not attached to its upstream node'
      changed_when: false
      register: is_node_not_attached
      failed_when: is_node_not_attached.rc not in [0, 1]

    - name: Extensions | Repmgr | Attach active standby to current primary node
      become: true
      become_user: postgres
      become_method: sudo
      command: "{{ repmgr.bin_dir[ansible_os_family] }}/repmgr standby follow"
      when:
        - is_node_not_attached.stdout | length > 0

- name: Extensions | Repmgr | Restart repmgr service
  service:
    name: "{{ repmgr.service_name[ansible_os_family] }}"
    state: restarted
    enabled: true
