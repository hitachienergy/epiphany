---
- name: Check if upgrade from current K8s version is supported
  block:
    - name: Get K8s cluster version
      become: true
      command: kubectl version --output yaml
      register: cluster_version
      changed_when: false

    - name: k8s | Check if upgrade from current K8s version is supported
      assert:
        that: "'{{ (cluster_version.stdout | from_yaml).serverVersion.gitVersion }}' is version('v1.17.7', '>=')"
        fail_msg: >-
          Your Kubernetes version ({{ cluster_version }}) is not supported by this version of Epiphany which requires
          at least version 1.17.7 (Epiphany v0.7.0). For more information, refer to the documentation.
        quiet: true
  run_once: true
  delegate_to: "{{ groups.kubernetes_master[0] }}"
  when:
    - "'kubernetes' in upgrade_components or upgrade_components|length == 0" # K8s is going to be upgraded
    - groups.kubernetes_master is defined
    - groups.kubernetes_master | length > 0

- name: Check available disk space for PostgreSQL
  block:
    - name: Include defaults from 'postgresql' role
      include_vars:
        file: roles/postgresql/defaults/main.yml
        name: postgres

    - name: Get filesystem info for PostgreSQL data directory
      become: true
      shell: |-
        set -o pipefail && \
        df {{ postgres.pg.base_dir[ansible_os_family] }} \
          | awk 'NR==1{for (i=1; i<=NF; i++) if (tolower($i) == "filesystem" ){dev=i; break}} NR==2{print $dev}'
      changed_when: false
      register: pg_data_disk

    - name: Ensure that free space on {{ pg_data_disk.stdout }} is grater than 50%
      assert:
        that: mount.size_available > mount.size_total|float * 0.5
        fail_msg: PostgreSQL disk space has reached 50% threshold
        quiet: true
      vars:
        mount: "{{ ansible_mounts | selectattr('device','equalto', pg_data_disk.stdout) | list | first }}"

    - name: Ensure that PostgreSQL data directory doesn't exist or is not empty
      block:
        - name: Get PostgreSQL data directory stat information
          stat:
            path: "{{ postgres.pg.data_dir[ansible_os_family] }}"
          register: pg_data_dir

        - name: Get PostgreSQL data directory content
          when: pg_data_dir.stat.exists
          find:
            paths: "{{ postgres.pg.data_dir[ansible_os_family] }}"
          register: pg_data_dir_files

        - name: Ensure that PostgreSQL data directory doesn't exist or is not empty
          assert:
            that: not pg_data_dir.stat.exists or pg_data_dir_files.matched == 0
            fail_msg: >-
              PostgreSQL data directory {{ postgres.pg.data_dir[ansible_os_family] }} doesn't exist or is not empty
            quiet: true
  when:
    - "'postgresql' in upgrade_components or upgrade_components|length == 0" # PostgreSQL is going to be upgraded
    - groups.postgresql is defined
    - groups.postgresql | length > 0
    - "'postgresql' in group_names" # run only on PostgreSQL hosts
