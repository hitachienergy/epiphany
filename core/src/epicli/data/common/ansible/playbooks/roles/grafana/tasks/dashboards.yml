---
- name: Download and prepare Grafana dashboards
  become: false
  run_once: true
  block:
    - name: Create local Grafana dashboards directory
      tempfile:
        state: directory
      register: tmp_dashboards
      changed_when: false
      check_mode: false

    - name: Download Grafana dashboards from grafana.com to temporary directory
      include_role:
        name: download
        tasks_from: download_file
      vars:
        url: "https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.revision_id }}/download"
        file_name: "grafana_dashboard_{{ item.dashboard_id }}.json"
        download_directory: "{{ tmp_dashboards.path }}/{{ item.dashboard_id }}.json"
        retries: 5
        delay: 2
      loop: "{{ grafana_online_dashboards }}"
      when: grafana_online_dashboards != []

    - name: Download Grafana dashboards from local repository to temporary directory
      include_role:
        name: download
        tasks_from: download_file
      vars:
        file_name: "grafana_dashboard_{{ item.dashboard_id }}.json"
        download_directory: "{{ tmp_dashboards.path }}/{{ item.dashboard_id }}.json"
        force: true # to keep indepotency (avoid HTTP Error 304: Not Modified)
      loop: "{{ grafana_external_dashboards }}"
      when: grafana_external_dashboards != []

    # As noted in [1] an exported dashboard replaces the exporter's datasource
    # name with a representative name, something like 'DS_GRAPHITE'. The name
    # is different for each datasource plugin, but always begins with 'DS_'.
    # In the rest of the data, the same name is used, but captured in braces,
    # for example: '${DS_GRAPHITE}'.
    #
    # [1] http://docs.grafana.org/reference/export_import/#import-sharing-with-grafana-2-x-or-3-0
    #
    # The data structure looks (massively abbreviated) something like:
    #
    #   "name": "DS_GRAPHITE",
    #   "datasource": "${DS_GRAPHITE}",
    #
    # If we import the downloaded dashboard verbatim, it will not automatically
    # be connected to the data source like we want it. The Grafana UI expects
    # us to do the final connection by hand, which we do not want to do.
    # So, in the below task we ensure that we replace instances of this string
    # with the data source name we want.
    # To make sure that we're not being too greedy with the regex replacement
    # of the data source to use for each dashboard that's uploaded, we make the
    # regex match very specific by using the following:
    #
    # 1. Literal boundaries for " on either side of the match.
    # 2. Non-capturing optional group matches for the ${} bits which may, or
    #    or may not, be there..
    # 3. A case-sensitive literal match for DS .
    # 4. A one-or-more case-sensitive match for the part that follows the
    #    underscore, with only A-Z, 0-9 and - or _ allowed.
    #
    # This regex can be tested and understood better by looking at the
    # matches and non-matches in https://regex101.com/r/f4Gkvg/6
    - name: Set the correct datasource name in the Grafana dashboard
      replace:
        path: "{{ tmp_dashboards.path }}/{{ item.dashboard_id }}.json"
        regexp: '"(?:\${)?DS_[A-Z0-9_-]+(?:})?"'
        replace: '"{{ item.datasource }}"'
      loop: "{{ grafana_online_dashboards | union(grafana_external_dashboards) | unique | list }}"

- name: Create/Update dashboards file (provisioning)
  copy:
    dest: /etc/grafana/provisioning/dashboards/ansible.yml
    content: |
      apiVersion: 1
      providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          options:
            path: "{{ grafana_data_dir }}/dashboards"
    backup: false
    owner: root
    group: grafana
    mode: u=rw,g=r,o=
  notify: restart grafana

- name: Register previously copied dashboards
  find:
    paths:
      - "{{ grafana_data_dir }}/dashboards"
    hidden: true
    patterns:
      - "*.json"
  register: dashboards_present
  when: grafana_provisioning_synced | bool

- name: Register provided dashboards
  find:
    paths:
      - "{{ tmp_dashboards.path }}/"
    hidden: true
    patterns:
      - "*.json"
  register: dashboards_provided

- name: Copy Grafana dashboards to target directory
  copy:
    remote_src: true
    src: "{{ item }}"
    dest: "{{ grafana_data_dir }}/dashboards/{{ item | basename }}"
    mode: ug=rw,o=
    owner: root
    group: grafana
  loop: "{{ dashboards_provided.files | map(attribute='path') | list }}"
  register: dashboards_copied
  notify: provisioned dashboards changed

- name: Get Grafana dashboard lists
  set_fact:
    dashboards_present_list: "{{ dashboards_present.files | map(attribute='path') | list }}"
    dashboards_copied_list: "{{ dashboards_copied.results | map(attribute='dest') | list }}"
  when: grafana_provisioning_synced | bool

- name: Remove old dashboards not mentioned in configuration manifest
  file:
    path: "{{ item }}"
    state: absent
  loop: "{{ dashboards_present_list | difference(dashboards_copied_list) }}"
  when: grafana_provisioning_synced | bool
