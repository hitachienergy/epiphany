---
- name: Ascertain recovery status (primary node)
  become_user: postgres
  postgresql_info:
    filter: in_recovery
  register: in_recovery_state

- name:  repmgr | prepare service for database recovery
  when: component_vars.specification.extensions.replication.enabled | default(false)
  block:
  # Actions taken only when replication with repmgr is enabled
  - name: Add postgres user to sudoers file
    lineinfile:
      path: /etc/sudoers
      line: >-
        postgres ALL=(ALL:ALL) NOPASSWD:
        /bin/systemctl start {{ pg.service_name[ansible_os_family] }},
        /bin/systemctl stop {{ pg.service_name[ansible_os_family] }},
        /bin/systemctl restart {{ pg.service_name[ansible_os_family] }},
        /bin/systemctl reload {{ pg.service_name[ansible_os_family] }},
        /bin/systemctl start {{ repmgr.service_name[ansible_os_family] }},
        /bin/systemctl stop {{ repmgr.service_name[ansible_os_family] }}
      validate: 'visudo -cf %s'

  - name: Search for primary node hostname
    become_user: postgres
    shell: |-
      set -o pipefail && \
      {{ repmgr.bin_dir[ansible_os_family] }}/repmgr cluster show \
        | awk 'BEGIN{FS="|"} {gsub(/ /,""); if ($3 == "primary") print $2}'
    args:
      executable: /bin/bash
    changed_when: false
    register: pg_node_primary
    failed_when: pg_node_primary.rc != 0 or pg_node_primary.stdout == ""

  - name: Standby node | stop repmgr
    when: in_recovery_state.in_recovery
    service:
      name: "{{ repmgr.service_name[ansible_os_family] }}"
      state: stopped

  - name: Primary node | stop repmgr
    when: not in_recovery_state.in_recovery
    service:
      name: "{{ repmgr.service_name[ansible_os_family] }}"
      state: stopped

- name: Copy and restore backup files
  # Running on primary or only node
  when: not in_recovery_state.in_recovery
  block:
    - name: Find snapshot archive
      import_tasks: common/find_snapshot_archive.yml
      vars:
        snapshot_prefix: "postgresql"
        snapshot_name: "{{ specification.components.postgresql.snapshot_name }}"

    - name: Transfer database backup via rsync
      import_tasks: common/upload_via_rsync.yml
      vars:
        artifacts:
          - "{{ snapshot_path  }}"
          - "{{ snapshot_path  }}.sha1"

    - name: Verify snapshot checksum
      import_tasks: common/verify_snapshot_checksum.yml

    - name: Create temp directories
      file:
        path: "/var/tmp/{{ item }}"
        state: directory
        mode: 0777
      loop:
        - postgresql_restore_source
        - postgresql_temp_config

    - name: Extract backup file
      unarchive:
        dest: "/var/tmp/postgresql_restore_source/"
        src: "{{ recovery_dir }}/{{ snapshot_path | basename }}"
        remote_src: true

    - name: Cache existing configuration files
      block:
        - name: List existing configuration files
          shell: "find *.conf"
          args:
            chdir: "{{ pg.config_dir[ansible_os_family] }}"
          register: config_files

        - name: Copy existing configuration files
          copy:
            src: "{{ pg.config_dir[ansible_os_family] }}/{{ item }}"
            dest: "/var/tmp/postgresql_temp_config/"
            remote_src: yes
          loop: "{{ config_files.stdout_lines|flatten(levels=1) }}"

    - name: Stop database service
      systemd:
        name: "{{ pg.service_name[ansible_os_family] }}"
        state: stopped

    - name: Drop old database / delete main data directory
      file:
        path: "{{ pg.data_dir[ansible_os_family] }}/"
        state: absent

    - name: Initialize database
      block:
      - name: Ensure that data directory exists
        file:
          path: "{{ pg.data_dir[ansible_os_family] }}"
          state: directory
          owner: postgres
          group: postgres

      - name: Initialize database
        become_user: postgres
        command: "{{ pg.bin_dir[ansible_os_family] }}/initdb -D {{ pg.data_dir[ansible_os_family] }}"

    - name: Copy cached config files
      copy:
        src: "/var/tmp/postgresql_temp_config/"
        dest: "{{ pg.config_dir[ansible_os_family] }}/"
        owner: postgres
        group: postgres
        remote_src: yes

    - name: Start Postgresql service
      systemd:
        name: "{{ pg.service_name[ansible_os_family] }}"
        state: started

    - name: Import database from dump file
      become_user: postgres
      command: "psql -f /var/tmp/postgresql_restore_source/data/database_dump.sql postgres"

    - name: Primary node | configure repmgr
      when: component_vars.specification.extensions.replication.enabled | default(false)
      block:
      - name: Register primary node in repmgr
        become_user: postgres
        shell: "repmgr --superuser={{ component_vars.specification.extensions.replication.privileged_user_name }} primary register --force"

      - name: Primary node | start repmgr
        service:
          name: "{{ repmgr.service_name[ansible_os_family] }}"
          state: started

    - name: Remove created temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/var/tmp/postgresql_restore_source/"
        - "/var/tmp/postgresql_temp_config/"
        - "{{ recovery_dir }}/{{ snapshot_path | basename }}"
        - "{{ recovery_dir }}/{{ snapshot_path | basename }}.sha1"

- name: Standby node(s) | configure repmgr
  when:
    - component_vars.specification.extensions.replication.enabled | default(false)
    - in_recovery_state.in_recovery
  block:
    - name: Stop postgresql service
      service:
        name: "{{ pg.service_name[ansible_os_family] }}"
        state: stopped

    - name: Create temporary directory
      file:
        path: "/var/tmp/postgresql_temp_config"
        state: directory
        mode: 0666

    - name: Cache existing configuration files
      block:
        - name: search for existing configuration files (RedHat)
          shell: "find *.conf"
          args:
            chdir: "{{ pg.config_dir[ansible_os_family] }}"
          register: config_files

        - name: Copy existing configuration files
          copy:
            src: "{{ pg.config_dir[ansible_os_family] }}/{{ item }}"
            dest: "/var/tmp/postgresql_temp_config/"
            remote_src: yes
          loop: "{{ config_files.stdout_lines|flatten(levels=1) }}"

    - name: Delete existing data directory before cloning from primary node
      file:
        path: "{{ pg.data_dir[ansible_os_family] }}/"
        state: absent

    - name: Ensure that data directory exists (RedHat)  # This check needs to be run on RedHat family systems since not always location is created by clone
      when: ansible_os_family == 'RedHat'
      file:
        path: "{{ pg.data_dir[ansible_os_family] }}/"
        state: directory
        owner: postgres
        group: postgres

    - name: Clone content from primary node using repmgr
      become_user: postgres
      shell: "repmgr -h {{ pg_node_primary.stdout }} -U {{ component_vars.specification.extensions.replication.privileged_user_name }} -d {{ component_vars.specification.extensions.replication.repmgr_database }} -p 5432 standby clone --force"

    - name: Copy cached config files back to database configuration location
      copy:
        src: "/var/tmp/postgresql_temp_config/"
        dest: "{{ pg.config_dir[ansible_os_family] }}/"
        owner: postgres
        group: postgres
        remote_src: yes

    - name: Start postgresql service
      service:
        name: "{{ pg.service_name[ansible_os_family] }}"
        state: started

    - name: Register secondary node to repmgr cluster
      become_user: postgres
      shell: "repmgr standby register --force"

    - name: Start repmgr service
      service:
        name: "{{ repmgr.service_name[ansible_os_family] }}"
        state: started

    - name: Rejoin secondary node to repmgr cluster
      become_user: postgres
      command: "repmgr standby follow"
