---
# This role is responsible for installing and configuring Hashicorp Vault
# TODO: Add swap disable
# TODO: Limit to set only on 1 master until vault will be clustered

- name: Determine if helm chart custom values are set
  set_fact:
    # Handling "undefined", "null" and "empty" values all at once.
    vault_helm_chart_values_bool: "{{ specification.vault_helm_chart_values | default(false) | ternary(true, false) }}"

- name: Clean up temporary Vault Helm chart values file
  file:
    state: absent
    path: /tmp/vault_helm_chart_values.yaml

- name: Set full Vault address
  set_fact:
    full_vault_address: "{{ specification.tls_disable | ternary('http', 'https') }}://{{ hostvars[groups['vault'][0]]['ansible_default_ipv4']['address'] }}:8200"
  when: specification.vault_helm_chart_values.injector.externalVaultAddr is not defined

- name: Set final Vault Helm chart's custom configuration file content
  set_fact:
    final_vault_helm_chart_values: "{{ specification.vault_helm_chart_values | combine({'injector': {'externalVaultAddr': full_vault_address}},recursive=True) }}"
  when: specification.vault_helm_chart_values.injector.externalVaultAddr is not defined

- name: Set final Vault Helm chart's custom configuration file content - manual externalVaultAddr config
  set_fact:
    final_vault_helm_chart_values: "{{ specification.vault_helm_chart_values }}"
  when: specification.vault_helm_chart_values.injector.externalVaultAddr is defined

- name: Copy Vault Helm chart's custom configuration to file
  copy:
    content: "{{ final_vault_helm_chart_values }}"
    dest: /tmp/vault_helm_chart_values.yaml
  when: vault_helm_chart_values_bool

- name: Install and configure Hashicorp Vault
  block:
    - name: Create Vault system group
      group:
        name: "{{ specification.vault_system_group }}"
        system: yes

    - name: Create Vault system user
      user:
        name: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        system: yes
        shell: "/usr/sbin/nologin"

    - name: Create Vault directories
      file:
        path: "{{ specification.vault_install_dir }}/{{ item }}"
        state: directory
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rwx,g=rx,o=
      loop:
        - "bin"
        - "config"
        - "data"
        - "kubernetes"
        - "logs"
        - "config/policies"
        - "tls"

    - name: Set Vault file name to install
      set_fact:
        vault_file_name: "{{ vault.file_name[ansible_architecture] }}"

    - name: Download Vault binary package
      include_role:
        name: download
        tasks_from: download_file
      vars:
        file_name: "{{ vault_file_name }}"

    - name: Download Vault Agent Helm chart package
      include_role:
        name: download
        tasks_from: download_file
      vars:
        file_name: "{{ specification.files.vault_helm_chart_file_name }}"

    - name: Check for Vault binary
      stat:
        path: "{{ specification.vault_install_dir }}/bin/vault"
      register: vault_binary

    - name: Uncompress the Vault zip
      when: not vault_binary.stat.exists
      unarchive:
        remote_src: yes
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        src: "{{ download_directory }}/{{ vault_file_name }}"
        creates: "{{ specification.vault_install_dir }}/bin/vault"
        dest: "{{ specification.vault_install_dir }}/bin/"
        mode: u=rwx,g=rx,o=

    - name: Create a symbolic link to Vault
      file:
        src: "{{ specification.vault_install_dir }}/bin/vault"
        dest: /usr/local/bin/vault
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        state: link

    - name: Create Vault configuration file
      template:
        dest: "{{ specification.vault_install_dir }}/config/config.hcl"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/config.hcl.j2

    - name: Set capabilities required to lock memory
      capabilities:
        path: "{{ specification.vault_install_dir }}/bin/vault"
        capability: cap_ipc_lock=+ep
        state: present

    - name: Set fs.suid_dumpable to 0
      sysctl:
        name: fs.suid_dumpable
        value: '0'
        sysctl_set: yes
        state: present
        reload: yes

    - name: Set security limits for Vault
      pam_limits:
        domain: '*'
        limit_type: hard
        limit_item: core
        value: '0'

    - name: Copy Vault unsealing script
      copy:
        src: vault/unseal-vault.sh
        dest: "{{ specification.vault_install_dir }}/bin/"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rwx,g=rx,o=

    - name: Create systemd service
      template:
        dest: /etc/systemd/system/vault.service
        owner: root
        group: root
        mode: u=rw,g=r,o=
        src: vault/vault.service.j2
      register: service_conf

    - name: Configure Hashicorp Vault TLS support if enabled
      when:
        - not specification.tls_disable
      block:
        - name: Look for certificate in role directory
          local_action: find paths="{{ role_path }}/files/tls-certs" patterns="*.pem"
          become: no
          register: provided_certificates

        - name: Check if any certificate exists in role directory
          set_fact:
            certificate_exists: "{{ provided_certificates.matched > 0 }}"

        - name: Display result
          debug:
            msg: Certificate file {{ (provided_certificates.matched > 0) | ternary('found','not found') }}

        - name: Copy certificate to remote host
          copy:
            src: "{{ item.path }}"
            dest: "{{ specification.vault_install_dir }}/tls/"
          loop: "{{ provided_certificates.files }}"
          when:
            - certificate_exists

        - name: Generate TLS certificate
          include_tasks: generate-certificate.yml
          when:
            - not certificate_exists

    - name: Restart Vault service and reload config
      systemd:
        name: vault
        state: restarted
        daemon_reload: yes
      when:
        - service_conf.changed

    - name: Start Vault service
      systemd:
        name: vault
        state: started
        enabled: yes

    - name: Copy Vault configuration script
      copy:
        src: vault/configure-vault.sh
        dest: "{{ specification.vault_install_dir }}/bin/"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rwx,g=rx,o=

    - name: Generate admin policy
      template:
        dest: "{{ specification.vault_install_dir }}/config/policies/policy-admin.hcl"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/policy-admin.hcl.j2

    - name: Generate provisioner policy
      template:
        dest: "{{ specification.vault_install_dir }}/config/policies/policy-provisioner.hcl"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/policy-provisioner.hcl.j2

    - name: Generate application policy
      template:
        dest: "{{ specification.vault_install_dir }}/config/policies/policy-application.hcl"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/policy-application.hcl.j2

    - name: Generate config file for Vault configuration script
      template:
        dest: "{{ specification.vault_install_dir }}/script.config"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/script.config.j2

    - name: Generate file with users to be created by the script
      template:
        dest: "{{ specification.vault_install_dir }}/users.csv"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: vault/users.csv.j2

    - name: Copy Vault namespace yaml
      copy:
        src: kubernetes/vault-namespace.yml
        dest: "{{ specification.vault_install_dir }}/kubernetes/"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=

    - name: Create policy yaml for default namespace
      template:
        dest: "{{ specification.vault_install_dir }}/kubernetes/vault-default-policy.yml"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: kubernetes/vault-default-policy.yml.j2

    - name: Create application namespace yaml
      template:
        dest: "{{ specification.vault_install_dir }}/kubernetes/app-namespace.yml"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: kubernetes/app-namespace.yml.j2
      when: not specification.kubernetes_namespace == "default"

    - name: Create Vault service account yaml
      template:
        dest: "{{ specification.vault_install_dir }}/kubernetes/vault-service-account.yml"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: kubernetes/vault-service-account.yml.j2

    - name: Create application service account yaml
      template:
        dest: "{{ specification.vault_install_dir }}/kubernetes/app-service-account.yml"
        owner: "{{ specification.vault_system_user }}"
        group: "{{ specification.vault_system_group }}"
        mode: u=rw,g=r,o=
        src: kubernetes/app-service-account.yml.j2

    - name: Check if Vault protocol is set to http
      set_fact:
        vault_protocol: http
      when: specification.tls_disable

    - name: Check if Vault protocol is set to https
      set_fact:
        vault_protocol: https
      when: not specification.tls_disable

    - name: Run configuration script
      when:
        - specification.vault_script_autoconfiguration
      shell: >-
        {{ specification.vault_install_dir }}/bin/configure-vault.sh
        -c {{ specification.vault_install_dir }}/script.config
        -a {{ ansible_default_ipv4.address }}
        -p {{ vault_protocol }}
        -v {{ vault_helm_chart_values_bool|lower }}

    - name: Display information about running configuration script
      when:
        - not specification.vault_script_autoconfiguration
      debug:
        msg: "Init file doesn't exist or you have chosen manual unsealing, so to finish configuration please run script manually with command:
              {{ specification.vault_install_dir }}/bin/configure-vault.sh -c {{ specification.vault_install_dir }}/script.config -a {{ ansible_default_ipv4.address }} -p {{ vault_protocol }} -v {{ vault_helm_chart_values_bool|lower }}.
              Also please put 'init.txt' file, containing output from 'vault operator init' command, in ''{{ specification.vault_install_dir }}' directory."
